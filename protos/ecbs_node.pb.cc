// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecbs_node.proto

#include "ecbs_node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ECBSProto {
constexpr ECBSNode_Location::ECBSNode_Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct ECBSNode_LocationDefaultTypeInternal {
  constexpr ECBSNode_LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECBSNode_LocationDefaultTypeInternal() {}
  union {
    ECBSNode_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECBSNode_LocationDefaultTypeInternal _ECBSNode_Location_default_instance_;
constexpr ECBSNode_State::ECBSNode_State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , x_(0)
  , y_(0){}
struct ECBSNode_StateDefaultTypeInternal {
  constexpr ECBSNode_StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECBSNode_StateDefaultTypeInternal() {}
  union {
    ECBSNode_State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECBSNode_StateDefaultTypeInternal _ECBSNode_State_default_instance_;
constexpr ECBSNode_Constraints_VertexConstraint::ECBSNode_Constraints_VertexConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , x_(0)
  , y_(0)
  , for_who_(0){}
struct ECBSNode_Constraints_VertexConstraintDefaultTypeInternal {
  constexpr ECBSNode_Constraints_VertexConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECBSNode_Constraints_VertexConstraintDefaultTypeInternal() {}
  union {
    ECBSNode_Constraints_VertexConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECBSNode_Constraints_VertexConstraintDefaultTypeInternal _ECBSNode_Constraints_VertexConstraint_default_instance_;
constexpr ECBSNode_Constraints_EdgeConstraint::ECBSNode_Constraints_EdgeConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , x1_(0)
  , y1_(0)
  , x2_(0)
  , y2_(0)
  , for_who_(0){}
struct ECBSNode_Constraints_EdgeConstraintDefaultTypeInternal {
  constexpr ECBSNode_Constraints_EdgeConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECBSNode_Constraints_EdgeConstraintDefaultTypeInternal() {}
  union {
    ECBSNode_Constraints_EdgeConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECBSNode_Constraints_EdgeConstraintDefaultTypeInternal _ECBSNode_Constraints_EdgeConstraint_default_instance_;
constexpr ECBSNode_Constraints::ECBSNode_Constraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertex_constraints_()
  , edge_constraints_(){}
struct ECBSNode_ConstraintsDefaultTypeInternal {
  constexpr ECBSNode_ConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECBSNode_ConstraintsDefaultTypeInternal() {}
  union {
    ECBSNode_Constraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECBSNode_ConstraintsDefaultTypeInternal _ECBSNode_Constraints_default_instance_;
constexpr ECBSNode_PathEntry::ECBSNode_PathEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr)
  , parent_(nullptr)
  , fscore_(0)
  , gscore_(0)
  , focalscore_(0){}
struct ECBSNode_PathEntryDefaultTypeInternal {
  constexpr ECBSNode_PathEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECBSNode_PathEntryDefaultTypeInternal() {}
  union {
    ECBSNode_PathEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECBSNode_PathEntryDefaultTypeInternal _ECBSNode_PathEntry_default_instance_;
constexpr ECBSNode_Path::ECBSNode_Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(){}
struct ECBSNode_PathDefaultTypeInternal {
  constexpr ECBSNode_PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECBSNode_PathDefaultTypeInternal() {}
  union {
    ECBSNode_Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECBSNode_PathDefaultTypeInternal _ECBSNode_Path_default_instance_;
constexpr ECBSNode::ECBSNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cost_matrix_()
  , constraint_sets_()
  , lb_(0)
  , focal_score_(0)
  , fmin_(0){}
struct ECBSNodeDefaultTypeInternal {
  constexpr ECBSNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECBSNodeDefaultTypeInternal() {}
  union {
    ECBSNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECBSNodeDefaultTypeInternal _ECBSNode_default_instance_;
}  // namespace ECBSProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ecbs_5fnode_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ecbs_5fnode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ecbs_5fnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ecbs_5fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Location, x_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Location, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_State, time_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_State, x_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_State, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_VertexConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_VertexConstraint, time_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_VertexConstraint, x_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_VertexConstraint, y_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_VertexConstraint, for_who_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_EdgeConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_EdgeConstraint, time_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_EdgeConstraint, x1_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_EdgeConstraint, y1_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_EdgeConstraint, x2_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_EdgeConstraint, y2_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints_EdgeConstraint, for_who_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints, vertex_constraints_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Constraints, edge_constraints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_PathEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_PathEntry, state_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_PathEntry, fscore_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_PathEntry, gscore_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_PathEntry, focalscore_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_PathEntry, parent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode_Path, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode, cost_matrix_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode, constraint_sets_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode, lb_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode, focal_score_),
  PROTOBUF_FIELD_OFFSET(::ECBSProto::ECBSNode, fmin_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ECBSProto::ECBSNode_Location)},
  { 7, -1, sizeof(::ECBSProto::ECBSNode_State)},
  { 15, -1, sizeof(::ECBSProto::ECBSNode_Constraints_VertexConstraint)},
  { 24, -1, sizeof(::ECBSProto::ECBSNode_Constraints_EdgeConstraint)},
  { 35, -1, sizeof(::ECBSProto::ECBSNode_Constraints)},
  { 42, -1, sizeof(::ECBSProto::ECBSNode_PathEntry)},
  { 52, -1, sizeof(::ECBSProto::ECBSNode_Path)},
  { 58, -1, sizeof(::ECBSProto::ECBSNode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECBSProto::_ECBSNode_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECBSProto::_ECBSNode_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECBSProto::_ECBSNode_Constraints_VertexConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECBSProto::_ECBSNode_Constraints_EdgeConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECBSProto::_ECBSNode_Constraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECBSProto::_ECBSNode_PathEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECBSProto::_ECBSNode_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECBSProto::_ECBSNode_default_instance_),
};

const char descriptor_table_protodef_ecbs_5fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ecbs_node.proto\022\tECBSProto\"\223\006\n\010ECBSNod"
  "e\022-\n\013cost_matrix\030\001 \003(\0132\030.ECBSProto.ECBSN"
  "ode.Path\0228\n\017constraint_sets\030\002 \003(\0132\037.ECBS"
  "Proto.ECBSNode.Constraints\022\n\n\002LB\030\003 \001(\005\022\023"
  "\n\013focal_score\030\004 \001(\005\022\014\n\004fmin\030\005 \001(\005\032 \n\010Loc"
  "ation\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\032+\n\005State\022\014\n\004"
  "time\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\032\317\002\n\013Con"
  "straints\022L\n\022vertex_constraints\030\001 \003(\01320.E"
  "CBSProto.ECBSNode.Constraints.VertexCons"
  "traint\022H\n\020edge_constraints\030\002 \003(\0132..ECBSP"
  "roto.ECBSNode.Constraints.EdgeConstraint"
  "\032G\n\020VertexConstraint\022\014\n\004time\030\001 \001(\005\022\t\n\001x\030"
  "\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\017\n\007for_who\030\004 \001(\005\032_\n\016Edg"
  "eConstraint\022\014\n\004time\030\001 \001(\005\022\n\n\002x1\030\002 \001(\005\022\n\n"
  "\002y1\030\003 \001(\005\022\n\n\002x2\030\004 \001(\005\022\n\n\002y2\030\005 \001(\005\022\017\n\007for"
  "_who\030\006 \001(\005\032\230\001\n\tPathEntry\022(\n\005state\030\001 \001(\0132"
  "\031.ECBSProto.ECBSNode.State\022\016\n\006fScore\030\002 \001"
  "(\005\022\016\n\006gScore\030\003 \001(\005\022\022\n\nfocalScore\030\004 \001(\005\022-"
  "\n\006parent\030\005 \001(\0132\035.ECBSProto.ECBSNode.Path"
  "Entry\0323\n\004Path\022+\n\004path\030\001 \003(\0132\035.ECBSProto."
  "ECBSNode.PathEntryb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ecbs_5fnode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecbs_5fnode_2eproto = {
  false, false, 826, descriptor_table_protodef_ecbs_5fnode_2eproto, "ecbs_node.proto", 
  &descriptor_table_ecbs_5fnode_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_ecbs_5fnode_2eproto::offsets,
  file_level_metadata_ecbs_5fnode_2eproto, file_level_enum_descriptors_ecbs_5fnode_2eproto, file_level_service_descriptors_ecbs_5fnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ecbs_5fnode_2eproto_getter() {
  return &descriptor_table_ecbs_5fnode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ecbs_5fnode_2eproto(&descriptor_table_ecbs_5fnode_2eproto);
namespace ECBSProto {

// ===================================================================

class ECBSNode_Location::_Internal {
 public:
};

ECBSNode_Location::ECBSNode_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECBSProto.ECBSNode.Location)
}
ECBSNode_Location::ECBSNode_Location(const ECBSNode_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ECBSProto.ECBSNode.Location)
}

inline void ECBSNode_Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

ECBSNode_Location::~ECBSNode_Location() {
  // @@protoc_insertion_point(destructor:ECBSProto.ECBSNode.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECBSNode_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECBSNode_Location::ArenaDtor(void* object) {
  ECBSNode_Location* _this = reinterpret_cast< ECBSNode_Location* >(object);
  (void)_this;
}
void ECBSNode_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECBSNode_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECBSNode_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:ECBSProto.ECBSNode.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECBSNode_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECBSNode_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECBSProto.ECBSNode.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECBSProto.ECBSNode.Location)
  return target;
}

size_t ECBSNode_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECBSProto.ECBSNode.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECBSNode_Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECBSNode_Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECBSNode_Location::GetClassData() const { return &_class_data_; }

void ECBSNode_Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ECBSNode_Location *>(to)->MergeFrom(
      static_cast<const ECBSNode_Location &>(from));
}


void ECBSNode_Location::MergeFrom(const ECBSNode_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECBSProto.ECBSNode.Location)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECBSNode_Location::CopyFrom(const ECBSNode_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECBSProto.ECBSNode.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECBSNode_Location::IsInitialized() const {
  return true;
}

void ECBSNode_Location::InternalSwap(ECBSNode_Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECBSNode_Location, y_)
      + sizeof(ECBSNode_Location::y_)
      - PROTOBUF_FIELD_OFFSET(ECBSNode_Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECBSNode_Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecbs_5fnode_2eproto_getter, &descriptor_table_ecbs_5fnode_2eproto_once,
      file_level_metadata_ecbs_5fnode_2eproto[0]);
}

// ===================================================================

class ECBSNode_State::_Internal {
 public:
};

ECBSNode_State::ECBSNode_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECBSProto.ECBSNode.State)
}
ECBSNode_State::ECBSNode_State(const ECBSNode_State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&time_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ECBSProto.ECBSNode.State)
}

inline void ECBSNode_State::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&time_)) + sizeof(y_));
}

ECBSNode_State::~ECBSNode_State() {
  // @@protoc_insertion_point(destructor:ECBSProto.ECBSNode.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECBSNode_State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECBSNode_State::ArenaDtor(void* object) {
  ECBSNode_State* _this = reinterpret_cast< ECBSNode_State* >(object);
  (void)_this;
}
void ECBSNode_State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECBSNode_State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECBSNode_State::Clear() {
// @@protoc_insertion_point(message_clear_start:ECBSProto.ECBSNode.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&time_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECBSNode_State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECBSNode_State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECBSProto.ECBSNode.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECBSProto.ECBSNode.State)
  return target;
}

size_t ECBSNode_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECBSProto.ECBSNode.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECBSNode_State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECBSNode_State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECBSNode_State::GetClassData() const { return &_class_data_; }

void ECBSNode_State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ECBSNode_State *>(to)->MergeFrom(
      static_cast<const ECBSNode_State &>(from));
}


void ECBSNode_State::MergeFrom(const ECBSNode_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECBSProto.ECBSNode.State)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECBSNode_State::CopyFrom(const ECBSNode_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECBSProto.ECBSNode.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECBSNode_State::IsInitialized() const {
  return true;
}

void ECBSNode_State::InternalSwap(ECBSNode_State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECBSNode_State, y_)
      + sizeof(ECBSNode_State::y_)
      - PROTOBUF_FIELD_OFFSET(ECBSNode_State, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECBSNode_State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecbs_5fnode_2eproto_getter, &descriptor_table_ecbs_5fnode_2eproto_once,
      file_level_metadata_ecbs_5fnode_2eproto[1]);
}

// ===================================================================

class ECBSNode_Constraints_VertexConstraint::_Internal {
 public:
};

ECBSNode_Constraints_VertexConstraint::ECBSNode_Constraints_VertexConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECBSProto.ECBSNode.Constraints.VertexConstraint)
}
ECBSNode_Constraints_VertexConstraint::ECBSNode_Constraints_VertexConstraint(const ECBSNode_Constraints_VertexConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_who_) -
    reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
  // @@protoc_insertion_point(copy_constructor:ECBSProto.ECBSNode.Constraints.VertexConstraint)
}

inline void ECBSNode_Constraints_VertexConstraint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_who_) -
    reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
}

ECBSNode_Constraints_VertexConstraint::~ECBSNode_Constraints_VertexConstraint() {
  // @@protoc_insertion_point(destructor:ECBSProto.ECBSNode.Constraints.VertexConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECBSNode_Constraints_VertexConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECBSNode_Constraints_VertexConstraint::ArenaDtor(void* object) {
  ECBSNode_Constraints_VertexConstraint* _this = reinterpret_cast< ECBSNode_Constraints_VertexConstraint* >(object);
  (void)_this;
}
void ECBSNode_Constraints_VertexConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECBSNode_Constraints_VertexConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECBSNode_Constraints_VertexConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:ECBSProto.ECBSNode.Constraints.VertexConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_who_) -
      reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECBSNode_Constraints_VertexConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 for_who = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          for_who_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECBSNode_Constraints_VertexConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECBSProto.ECBSNode.Constraints.VertexConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int32 for_who = 4;
  if (this->_internal_for_who() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_for_who(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECBSProto.ECBSNode.Constraints.VertexConstraint)
  return target;
}

size_t ECBSNode_Constraints_VertexConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECBSProto.ECBSNode.Constraints.VertexConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 for_who = 4;
  if (this->_internal_for_who() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_for_who());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECBSNode_Constraints_VertexConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECBSNode_Constraints_VertexConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECBSNode_Constraints_VertexConstraint::GetClassData() const { return &_class_data_; }

void ECBSNode_Constraints_VertexConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ECBSNode_Constraints_VertexConstraint *>(to)->MergeFrom(
      static_cast<const ECBSNode_Constraints_VertexConstraint &>(from));
}


void ECBSNode_Constraints_VertexConstraint::MergeFrom(const ECBSNode_Constraints_VertexConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECBSProto.ECBSNode.Constraints.VertexConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_for_who() != 0) {
    _internal_set_for_who(from._internal_for_who());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECBSNode_Constraints_VertexConstraint::CopyFrom(const ECBSNode_Constraints_VertexConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECBSProto.ECBSNode.Constraints.VertexConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECBSNode_Constraints_VertexConstraint::IsInitialized() const {
  return true;
}

void ECBSNode_Constraints_VertexConstraint::InternalSwap(ECBSNode_Constraints_VertexConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECBSNode_Constraints_VertexConstraint, for_who_)
      + sizeof(ECBSNode_Constraints_VertexConstraint::for_who_)
      - PROTOBUF_FIELD_OFFSET(ECBSNode_Constraints_VertexConstraint, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECBSNode_Constraints_VertexConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecbs_5fnode_2eproto_getter, &descriptor_table_ecbs_5fnode_2eproto_once,
      file_level_metadata_ecbs_5fnode_2eproto[2]);
}

// ===================================================================

class ECBSNode_Constraints_EdgeConstraint::_Internal {
 public:
};

ECBSNode_Constraints_EdgeConstraint::ECBSNode_Constraints_EdgeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
}
ECBSNode_Constraints_EdgeConstraint::ECBSNode_Constraints_EdgeConstraint(const ECBSNode_Constraints_EdgeConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_who_) -
    reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
  // @@protoc_insertion_point(copy_constructor:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
}

inline void ECBSNode_Constraints_EdgeConstraint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_who_) -
    reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
}

ECBSNode_Constraints_EdgeConstraint::~ECBSNode_Constraints_EdgeConstraint() {
  // @@protoc_insertion_point(destructor:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECBSNode_Constraints_EdgeConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECBSNode_Constraints_EdgeConstraint::ArenaDtor(void* object) {
  ECBSNode_Constraints_EdgeConstraint* _this = reinterpret_cast< ECBSNode_Constraints_EdgeConstraint* >(object);
  (void)_this;
}
void ECBSNode_Constraints_EdgeConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECBSNode_Constraints_EdgeConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECBSNode_Constraints_EdgeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_who_) -
      reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECBSNode_Constraints_EdgeConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          x2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          y2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 for_who = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          for_who_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECBSNode_Constraints_EdgeConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x1(), target);
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y1(), target);
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_x2(), target);
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_y2(), target);
  }

  // int32 for_who = 6;
  if (this->_internal_for_who() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_for_who(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
  return target;
}

size_t ECBSNode_Constraints_EdgeConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x1());
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y1());
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x2());
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y2());
  }

  // int32 for_who = 6;
  if (this->_internal_for_who() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_for_who());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECBSNode_Constraints_EdgeConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECBSNode_Constraints_EdgeConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECBSNode_Constraints_EdgeConstraint::GetClassData() const { return &_class_data_; }

void ECBSNode_Constraints_EdgeConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ECBSNode_Constraints_EdgeConstraint *>(to)->MergeFrom(
      static_cast<const ECBSNode_Constraints_EdgeConstraint &>(from));
}


void ECBSNode_Constraints_EdgeConstraint::MergeFrom(const ECBSNode_Constraints_EdgeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_x1() != 0) {
    _internal_set_x1(from._internal_x1());
  }
  if (from._internal_y1() != 0) {
    _internal_set_y1(from._internal_y1());
  }
  if (from._internal_x2() != 0) {
    _internal_set_x2(from._internal_x2());
  }
  if (from._internal_y2() != 0) {
    _internal_set_y2(from._internal_y2());
  }
  if (from._internal_for_who() != 0) {
    _internal_set_for_who(from._internal_for_who());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECBSNode_Constraints_EdgeConstraint::CopyFrom(const ECBSNode_Constraints_EdgeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECBSProto.ECBSNode.Constraints.EdgeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECBSNode_Constraints_EdgeConstraint::IsInitialized() const {
  return true;
}

void ECBSNode_Constraints_EdgeConstraint::InternalSwap(ECBSNode_Constraints_EdgeConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECBSNode_Constraints_EdgeConstraint, for_who_)
      + sizeof(ECBSNode_Constraints_EdgeConstraint::for_who_)
      - PROTOBUF_FIELD_OFFSET(ECBSNode_Constraints_EdgeConstraint, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECBSNode_Constraints_EdgeConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecbs_5fnode_2eproto_getter, &descriptor_table_ecbs_5fnode_2eproto_once,
      file_level_metadata_ecbs_5fnode_2eproto[3]);
}

// ===================================================================

class ECBSNode_Constraints::_Internal {
 public:
};

ECBSNode_Constraints::ECBSNode_Constraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertex_constraints_(arena),
  edge_constraints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECBSProto.ECBSNode.Constraints)
}
ECBSNode_Constraints::ECBSNode_Constraints(const ECBSNode_Constraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertex_constraints_(from.vertex_constraints_),
      edge_constraints_(from.edge_constraints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ECBSProto.ECBSNode.Constraints)
}

inline void ECBSNode_Constraints::SharedCtor() {
}

ECBSNode_Constraints::~ECBSNode_Constraints() {
  // @@protoc_insertion_point(destructor:ECBSProto.ECBSNode.Constraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECBSNode_Constraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECBSNode_Constraints::ArenaDtor(void* object) {
  ECBSNode_Constraints* _this = reinterpret_cast< ECBSNode_Constraints* >(object);
  (void)_this;
}
void ECBSNode_Constraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECBSNode_Constraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECBSNode_Constraints::Clear() {
// @@protoc_insertion_point(message_clear_start:ECBSProto.ECBSNode.Constraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_constraints_.Clear();
  edge_constraints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECBSNode_Constraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ECBSProto.ECBSNode.Constraints.VertexConstraint vertex_constraints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ECBSProto.ECBSNode.Constraints.EdgeConstraint edge_constraints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECBSNode_Constraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECBSProto.ECBSNode.Constraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ECBSProto.ECBSNode.Constraints.VertexConstraint vertex_constraints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertex_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertex_constraints(i), target, stream);
  }

  // repeated .ECBSProto.ECBSNode.Constraints.EdgeConstraint edge_constraints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edge_constraints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECBSProto.ECBSNode.Constraints)
  return target;
}

size_t ECBSNode_Constraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECBSProto.ECBSNode.Constraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ECBSProto.ECBSNode.Constraints.VertexConstraint vertex_constraints = 1;
  total_size += 1UL * this->_internal_vertex_constraints_size();
  for (const auto& msg : this->vertex_constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ECBSProto.ECBSNode.Constraints.EdgeConstraint edge_constraints = 2;
  total_size += 1UL * this->_internal_edge_constraints_size();
  for (const auto& msg : this->edge_constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECBSNode_Constraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECBSNode_Constraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECBSNode_Constraints::GetClassData() const { return &_class_data_; }

void ECBSNode_Constraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ECBSNode_Constraints *>(to)->MergeFrom(
      static_cast<const ECBSNode_Constraints &>(from));
}


void ECBSNode_Constraints::MergeFrom(const ECBSNode_Constraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECBSProto.ECBSNode.Constraints)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_constraints_.MergeFrom(from.vertex_constraints_);
  edge_constraints_.MergeFrom(from.edge_constraints_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECBSNode_Constraints::CopyFrom(const ECBSNode_Constraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECBSProto.ECBSNode.Constraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECBSNode_Constraints::IsInitialized() const {
  return true;
}

void ECBSNode_Constraints::InternalSwap(ECBSNode_Constraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertex_constraints_.InternalSwap(&other->vertex_constraints_);
  edge_constraints_.InternalSwap(&other->edge_constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECBSNode_Constraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecbs_5fnode_2eproto_getter, &descriptor_table_ecbs_5fnode_2eproto_once,
      file_level_metadata_ecbs_5fnode_2eproto[4]);
}

// ===================================================================

class ECBSNode_PathEntry::_Internal {
 public:
  static const ::ECBSProto::ECBSNode_State& state(const ECBSNode_PathEntry* msg);
  static const ::ECBSProto::ECBSNode_PathEntry& parent(const ECBSNode_PathEntry* msg);
};

const ::ECBSProto::ECBSNode_State&
ECBSNode_PathEntry::_Internal::state(const ECBSNode_PathEntry* msg) {
  return *msg->state_;
}
const ::ECBSProto::ECBSNode_PathEntry&
ECBSNode_PathEntry::_Internal::parent(const ECBSNode_PathEntry* msg) {
  return *msg->parent_;
}
ECBSNode_PathEntry::ECBSNode_PathEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECBSProto.ECBSNode.PathEntry)
}
ECBSNode_PathEntry::ECBSNode_PathEntry(const ECBSNode_PathEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::ECBSProto::ECBSNode_State(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::ECBSProto::ECBSNode_PathEntry(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  ::memcpy(&fscore_, &from.fscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&focalscore_) -
    reinterpret_cast<char*>(&fscore_)) + sizeof(focalscore_));
  // @@protoc_insertion_point(copy_constructor:ECBSProto.ECBSNode.PathEntry)
}

inline void ECBSNode_PathEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&focalscore_) -
    reinterpret_cast<char*>(&state_)) + sizeof(focalscore_));
}

ECBSNode_PathEntry::~ECBSNode_PathEntry() {
  // @@protoc_insertion_point(destructor:ECBSProto.ECBSNode.PathEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECBSNode_PathEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete parent_;
}

void ECBSNode_PathEntry::ArenaDtor(void* object) {
  ECBSNode_PathEntry* _this = reinterpret_cast< ECBSNode_PathEntry* >(object);
  (void)_this;
}
void ECBSNode_PathEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECBSNode_PathEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECBSNode_PathEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ECBSProto.ECBSNode.PathEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  ::memset(&fscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&focalscore_) -
      reinterpret_cast<char*>(&fscore_)) + sizeof(focalscore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECBSNode_PathEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ECBSProto.ECBSNode.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fScore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gScore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 focalScore = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          focalscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ECBSProto.ECBSNode.PathEntry parent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECBSNode_PathEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECBSProto.ECBSNode.PathEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ECBSProto.ECBSNode.State state = 1;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // int32 fScore = 2;
  if (this->_internal_fscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fscore(), target);
  }

  // int32 gScore = 3;
  if (this->_internal_gscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gscore(), target);
  }

  // int32 focalScore = 4;
  if (this->_internal_focalscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_focalscore(), target);
  }

  // .ECBSProto.ECBSNode.PathEntry parent = 5;
  if (this->_internal_has_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::parent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECBSProto.ECBSNode.PathEntry)
  return target;
}

size_t ECBSNode_PathEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECBSProto.ECBSNode.PathEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ECBSProto.ECBSNode.State state = 1;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .ECBSProto.ECBSNode.PathEntry parent = 5;
  if (this->_internal_has_parent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // int32 fScore = 2;
  if (this->_internal_fscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fscore());
  }

  // int32 gScore = 3;
  if (this->_internal_gscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gscore());
  }

  // int32 focalScore = 4;
  if (this->_internal_focalscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_focalscore());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECBSNode_PathEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECBSNode_PathEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECBSNode_PathEntry::GetClassData() const { return &_class_data_; }

void ECBSNode_PathEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ECBSNode_PathEntry *>(to)->MergeFrom(
      static_cast<const ECBSNode_PathEntry &>(from));
}


void ECBSNode_PathEntry::MergeFrom(const ECBSNode_PathEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECBSProto.ECBSNode.PathEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::ECBSProto::ECBSNode_State::MergeFrom(from._internal_state());
  }
  if (from._internal_has_parent()) {
    _internal_mutable_parent()->::ECBSProto::ECBSNode_PathEntry::MergeFrom(from._internal_parent());
  }
  if (from._internal_fscore() != 0) {
    _internal_set_fscore(from._internal_fscore());
  }
  if (from._internal_gscore() != 0) {
    _internal_set_gscore(from._internal_gscore());
  }
  if (from._internal_focalscore() != 0) {
    _internal_set_focalscore(from._internal_focalscore());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECBSNode_PathEntry::CopyFrom(const ECBSNode_PathEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECBSProto.ECBSNode.PathEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECBSNode_PathEntry::IsInitialized() const {
  return true;
}

void ECBSNode_PathEntry::InternalSwap(ECBSNode_PathEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECBSNode_PathEntry, focalscore_)
      + sizeof(ECBSNode_PathEntry::focalscore_)
      - PROTOBUF_FIELD_OFFSET(ECBSNode_PathEntry, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECBSNode_PathEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecbs_5fnode_2eproto_getter, &descriptor_table_ecbs_5fnode_2eproto_once,
      file_level_metadata_ecbs_5fnode_2eproto[5]);
}

// ===================================================================

class ECBSNode_Path::_Internal {
 public:
};

ECBSNode_Path::ECBSNode_Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECBSProto.ECBSNode.Path)
}
ECBSNode_Path::ECBSNode_Path(const ECBSNode_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ECBSProto.ECBSNode.Path)
}

inline void ECBSNode_Path::SharedCtor() {
}

ECBSNode_Path::~ECBSNode_Path() {
  // @@protoc_insertion_point(destructor:ECBSProto.ECBSNode.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECBSNode_Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECBSNode_Path::ArenaDtor(void* object) {
  ECBSNode_Path* _this = reinterpret_cast< ECBSNode_Path* >(object);
  (void)_this;
}
void ECBSNode_Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECBSNode_Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECBSNode_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:ECBSProto.ECBSNode.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECBSNode_Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ECBSProto.ECBSNode.PathEntry path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECBSNode_Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECBSProto.ECBSNode.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ECBSProto.ECBSNode.PathEntry path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_path(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECBSProto.ECBSNode.Path)
  return target;
}

size_t ECBSNode_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECBSProto.ECBSNode.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ECBSProto.ECBSNode.PathEntry path = 1;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECBSNode_Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECBSNode_Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECBSNode_Path::GetClassData() const { return &_class_data_; }

void ECBSNode_Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ECBSNode_Path *>(to)->MergeFrom(
      static_cast<const ECBSNode_Path &>(from));
}


void ECBSNode_Path::MergeFrom(const ECBSNode_Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECBSProto.ECBSNode.Path)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECBSNode_Path::CopyFrom(const ECBSNode_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECBSProto.ECBSNode.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECBSNode_Path::IsInitialized() const {
  return true;
}

void ECBSNode_Path::InternalSwap(ECBSNode_Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECBSNode_Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecbs_5fnode_2eproto_getter, &descriptor_table_ecbs_5fnode_2eproto_once,
      file_level_metadata_ecbs_5fnode_2eproto[6]);
}

// ===================================================================

class ECBSNode::_Internal {
 public:
};

ECBSNode::ECBSNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cost_matrix_(arena),
  constraint_sets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECBSProto.ECBSNode)
}
ECBSNode::ECBSNode(const ECBSNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cost_matrix_(from.cost_matrix_),
      constraint_sets_(from.constraint_sets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lb_, &from.lb_,
    static_cast<size_t>(reinterpret_cast<char*>(&fmin_) -
    reinterpret_cast<char*>(&lb_)) + sizeof(fmin_));
  // @@protoc_insertion_point(copy_constructor:ECBSProto.ECBSNode)
}

inline void ECBSNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fmin_) -
    reinterpret_cast<char*>(&lb_)) + sizeof(fmin_));
}

ECBSNode::~ECBSNode() {
  // @@protoc_insertion_point(destructor:ECBSProto.ECBSNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECBSNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECBSNode::ArenaDtor(void* object) {
  ECBSNode* _this = reinterpret_cast< ECBSNode* >(object);
  (void)_this;
}
void ECBSNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECBSNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECBSNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ECBSProto.ECBSNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_matrix_.Clear();
  constraint_sets_.Clear();
  ::memset(&lb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fmin_) -
      reinterpret_cast<char*>(&lb_)) + sizeof(fmin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECBSNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ECBSProto.ECBSNode.Path cost_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cost_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ECBSProto.ECBSNode.Constraints constraint_sets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraint_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 LB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 focal_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          focal_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fmin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECBSNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECBSProto.ECBSNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ECBSProto.ECBSNode.Path cost_matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cost_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cost_matrix(i), target, stream);
  }

  // repeated .ECBSProto.ECBSNode.Constraints constraint_sets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraint_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_constraint_sets(i), target, stream);
  }

  // int32 LB = 3;
  if (this->_internal_lb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lb(), target);
  }

  // int32 focal_score = 4;
  if (this->_internal_focal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_focal_score(), target);
  }

  // int32 fmin = 5;
  if (this->_internal_fmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_fmin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECBSProto.ECBSNode)
  return target;
}

size_t ECBSNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECBSProto.ECBSNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ECBSProto.ECBSNode.Path cost_matrix = 1;
  total_size += 1UL * this->_internal_cost_matrix_size();
  for (const auto& msg : this->cost_matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ECBSProto.ECBSNode.Constraints constraint_sets = 2;
  total_size += 1UL * this->_internal_constraint_sets_size();
  for (const auto& msg : this->constraint_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 LB = 3;
  if (this->_internal_lb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lb());
  }

  // int32 focal_score = 4;
  if (this->_internal_focal_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_focal_score());
  }

  // int32 fmin = 5;
  if (this->_internal_fmin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fmin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECBSNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECBSNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECBSNode::GetClassData() const { return &_class_data_; }

void ECBSNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ECBSNode *>(to)->MergeFrom(
      static_cast<const ECBSNode &>(from));
}


void ECBSNode::MergeFrom(const ECBSNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECBSProto.ECBSNode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_matrix_.MergeFrom(from.cost_matrix_);
  constraint_sets_.MergeFrom(from.constraint_sets_);
  if (from._internal_lb() != 0) {
    _internal_set_lb(from._internal_lb());
  }
  if (from._internal_focal_score() != 0) {
    _internal_set_focal_score(from._internal_focal_score());
  }
  if (from._internal_fmin() != 0) {
    _internal_set_fmin(from._internal_fmin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECBSNode::CopyFrom(const ECBSNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECBSProto.ECBSNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECBSNode::IsInitialized() const {
  return true;
}

void ECBSNode::InternalSwap(ECBSNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cost_matrix_.InternalSwap(&other->cost_matrix_);
  constraint_sets_.InternalSwap(&other->constraint_sets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECBSNode, fmin_)
      + sizeof(ECBSNode::fmin_)
      - PROTOBUF_FIELD_OFFSET(ECBSNode, lb_)>(
          reinterpret_cast<char*>(&lb_),
          reinterpret_cast<char*>(&other->lb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECBSNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecbs_5fnode_2eproto_getter, &descriptor_table_ecbs_5fnode_2eproto_once,
      file_level_metadata_ecbs_5fnode_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ECBSProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ECBSProto::ECBSNode_Location* Arena::CreateMaybeMessage< ::ECBSProto::ECBSNode_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECBSProto::ECBSNode_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::ECBSProto::ECBSNode_State* Arena::CreateMaybeMessage< ::ECBSProto::ECBSNode_State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECBSProto::ECBSNode_State >(arena);
}
template<> PROTOBUF_NOINLINE ::ECBSProto::ECBSNode_Constraints_VertexConstraint* Arena::CreateMaybeMessage< ::ECBSProto::ECBSNode_Constraints_VertexConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECBSProto::ECBSNode_Constraints_VertexConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::ECBSProto::ECBSNode_Constraints_EdgeConstraint* Arena::CreateMaybeMessage< ::ECBSProto::ECBSNode_Constraints_EdgeConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECBSProto::ECBSNode_Constraints_EdgeConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::ECBSProto::ECBSNode_Constraints* Arena::CreateMaybeMessage< ::ECBSProto::ECBSNode_Constraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECBSProto::ECBSNode_Constraints >(arena);
}
template<> PROTOBUF_NOINLINE ::ECBSProto::ECBSNode_PathEntry* Arena::CreateMaybeMessage< ::ECBSProto::ECBSNode_PathEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECBSProto::ECBSNode_PathEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ECBSProto::ECBSNode_Path* Arena::CreateMaybeMessage< ::ECBSProto::ECBSNode_Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECBSProto::ECBSNode_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::ECBSProto::ECBSNode* Arena::CreateMaybeMessage< ::ECBSProto::ECBSNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECBSProto::ECBSNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
