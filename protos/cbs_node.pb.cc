// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cbs_node.proto

#include "cbs_node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace CBSProto {
constexpr CBSNode_Location::CBSNode_Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct CBSNode_LocationDefaultTypeInternal {
  constexpr CBSNode_LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBSNode_LocationDefaultTypeInternal() {}
  union {
    CBSNode_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBSNode_LocationDefaultTypeInternal _CBSNode_Location_default_instance_;
constexpr CBSNode_State::CBSNode_State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , x_(0)
  , y_(0){}
struct CBSNode_StateDefaultTypeInternal {
  constexpr CBSNode_StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBSNode_StateDefaultTypeInternal() {}
  union {
    CBSNode_State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBSNode_StateDefaultTypeInternal _CBSNode_State_default_instance_;
constexpr CBSNode_Constraints_VertexConstraint::CBSNode_Constraints_VertexConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , x_(0)
  , y_(0)
  , for_who_(0){}
struct CBSNode_Constraints_VertexConstraintDefaultTypeInternal {
  constexpr CBSNode_Constraints_VertexConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBSNode_Constraints_VertexConstraintDefaultTypeInternal() {}
  union {
    CBSNode_Constraints_VertexConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBSNode_Constraints_VertexConstraintDefaultTypeInternal _CBSNode_Constraints_VertexConstraint_default_instance_;
constexpr CBSNode_Constraints_EdgeConstraint::CBSNode_Constraints_EdgeConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , x1_(0)
  , y1_(0)
  , x2_(0)
  , y2_(0)
  , for_who_(0){}
struct CBSNode_Constraints_EdgeConstraintDefaultTypeInternal {
  constexpr CBSNode_Constraints_EdgeConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBSNode_Constraints_EdgeConstraintDefaultTypeInternal() {}
  union {
    CBSNode_Constraints_EdgeConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBSNode_Constraints_EdgeConstraintDefaultTypeInternal _CBSNode_Constraints_EdgeConstraint_default_instance_;
constexpr CBSNode_Constraints::CBSNode_Constraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertex_constraints_()
  , edge_constraints_(){}
struct CBSNode_ConstraintsDefaultTypeInternal {
  constexpr CBSNode_ConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBSNode_ConstraintsDefaultTypeInternal() {}
  union {
    CBSNode_Constraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBSNode_ConstraintsDefaultTypeInternal _CBSNode_Constraints_default_instance_;
constexpr CBSNode_PathEntry::CBSNode_PathEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr)
  , parent_(nullptr)
  , fscore_(0)
  , gscore_(0)
  , focalscore_(0){}
struct CBSNode_PathEntryDefaultTypeInternal {
  constexpr CBSNode_PathEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBSNode_PathEntryDefaultTypeInternal() {}
  union {
    CBSNode_PathEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBSNode_PathEntryDefaultTypeInternal _CBSNode_PathEntry_default_instance_;
constexpr CBSNode_Path::CBSNode_Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(){}
struct CBSNode_PathDefaultTypeInternal {
  constexpr CBSNode_PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBSNode_PathDefaultTypeInternal() {}
  union {
    CBSNode_Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBSNode_PathDefaultTypeInternal _CBSNode_Path_default_instance_;
constexpr CBSNode::CBSNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cost_matrix_()
  , constraint_sets_(){}
struct CBSNodeDefaultTypeInternal {
  constexpr CBSNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBSNodeDefaultTypeInternal() {}
  union {
    CBSNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBSNodeDefaultTypeInternal _CBSNode_default_instance_;
}  // namespace CBSProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cbs_5fnode_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cbs_5fnode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cbs_5fnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cbs_5fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Location, x_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Location, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_State, time_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_State, x_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_State, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_VertexConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_VertexConstraint, time_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_VertexConstraint, x_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_VertexConstraint, y_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_VertexConstraint, for_who_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_EdgeConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_EdgeConstraint, time_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_EdgeConstraint, x1_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_EdgeConstraint, y1_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_EdgeConstraint, x2_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_EdgeConstraint, y2_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints_EdgeConstraint, for_who_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints, vertex_constraints_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Constraints, edge_constraints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_PathEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_PathEntry, state_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_PathEntry, fscore_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_PathEntry, gscore_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_PathEntry, focalscore_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_PathEntry, parent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode_Path, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode, cost_matrix_),
  PROTOBUF_FIELD_OFFSET(::CBSProto::CBSNode, constraint_sets_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CBSProto::CBSNode_Location)},
  { 7, -1, sizeof(::CBSProto::CBSNode_State)},
  { 15, -1, sizeof(::CBSProto::CBSNode_Constraints_VertexConstraint)},
  { 24, -1, sizeof(::CBSProto::CBSNode_Constraints_EdgeConstraint)},
  { 35, -1, sizeof(::CBSProto::CBSNode_Constraints)},
  { 42, -1, sizeof(::CBSProto::CBSNode_PathEntry)},
  { 52, -1, sizeof(::CBSProto::CBSNode_Path)},
  { 58, -1, sizeof(::CBSProto::CBSNode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CBSProto::_CBSNode_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CBSProto::_CBSNode_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CBSProto::_CBSNode_Constraints_VertexConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CBSProto::_CBSNode_Constraints_EdgeConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CBSProto::_CBSNode_Constraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CBSProto::_CBSNode_PathEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CBSProto::_CBSNode_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CBSProto::_CBSNode_default_instance_),
};

const char descriptor_table_protodef_cbs_5fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016cbs_node.proto\022\010CBSProto\"\325\005\n\007CBSNode\022+"
  "\n\013cost_matrix\030\001 \003(\0132\026.CBSProto.CBSNode.P"
  "ath\0226\n\017constraint_sets\030\002 \003(\0132\035.CBSProto."
  "CBSNode.Constraints\032 \n\010Location\022\t\n\001x\030\001 \001"
  "(\005\022\t\n\001y\030\002 \001(\005\032+\n\005State\022\014\n\004time\030\001 \001(\005\022\t\n\001"
  "x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\032\313\002\n\013Constraints\022J\n\022ve"
  "rtex_constraints\030\001 \003(\0132..CBSProto.CBSNod"
  "e.Constraints.VertexConstraint\022F\n\020edge_c"
  "onstraints\030\002 \003(\0132,.CBSProto.CBSNode.Cons"
  "traints.EdgeConstraint\032G\n\020VertexConstrai"
  "nt\022\014\n\004time\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\017"
  "\n\007for_who\030\004 \001(\005\032_\n\016EdgeConstraint\022\014\n\004tim"
  "e\030\001 \001(\005\022\n\n\002x1\030\002 \001(\005\022\n\n\002y1\030\003 \001(\005\022\n\n\002x2\030\004 "
  "\001(\005\022\n\n\002y2\030\005 \001(\005\022\017\n\007for_who\030\006 \001(\005\032\224\001\n\tPat"
  "hEntry\022&\n\005state\030\001 \001(\0132\027.CBSProto.CBSNode"
  ".State\022\016\n\006fScore\030\002 \001(\005\022\016\n\006gScore\030\003 \001(\005\022\022"
  "\n\nfocalScore\030\004 \001(\005\022+\n\006parent\030\005 \001(\0132\033.CBS"
  "Proto.CBSNode.PathEntry\0321\n\004Path\022)\n\004path\030"
  "\001 \003(\0132\033.CBSProto.CBSNode.PathEntryb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cbs_5fnode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cbs_5fnode_2eproto = {
  false, false, 762, descriptor_table_protodef_cbs_5fnode_2eproto, "cbs_node.proto", 
  &descriptor_table_cbs_5fnode_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_cbs_5fnode_2eproto::offsets,
  file_level_metadata_cbs_5fnode_2eproto, file_level_enum_descriptors_cbs_5fnode_2eproto, file_level_service_descriptors_cbs_5fnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cbs_5fnode_2eproto_getter() {
  return &descriptor_table_cbs_5fnode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cbs_5fnode_2eproto(&descriptor_table_cbs_5fnode_2eproto);
namespace CBSProto {

// ===================================================================

class CBSNode_Location::_Internal {
 public:
};

CBSNode_Location::CBSNode_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBSProto.CBSNode.Location)
}
CBSNode_Location::CBSNode_Location(const CBSNode_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CBSProto.CBSNode.Location)
}

inline void CBSNode_Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CBSNode_Location::~CBSNode_Location() {
  // @@protoc_insertion_point(destructor:CBSProto.CBSNode.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBSNode_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBSNode_Location::ArenaDtor(void* object) {
  CBSNode_Location* _this = reinterpret_cast< CBSNode_Location* >(object);
  (void)_this;
}
void CBSNode_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBSNode_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBSNode_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:CBSProto.CBSNode.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBSNode_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBSNode_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBSProto.CBSNode.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBSProto.CBSNode.Location)
  return target;
}

size_t CBSNode_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBSProto.CBSNode.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBSNode_Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBSNode_Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBSNode_Location::GetClassData() const { return &_class_data_; }

void CBSNode_Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CBSNode_Location *>(to)->MergeFrom(
      static_cast<const CBSNode_Location &>(from));
}


void CBSNode_Location::MergeFrom(const CBSNode_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBSProto.CBSNode.Location)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBSNode_Location::CopyFrom(const CBSNode_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBSProto.CBSNode.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBSNode_Location::IsInitialized() const {
  return true;
}

void CBSNode_Location::InternalSwap(CBSNode_Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBSNode_Location, y_)
      + sizeof(CBSNode_Location::y_)
      - PROTOBUF_FIELD_OFFSET(CBSNode_Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBSNode_Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cbs_5fnode_2eproto_getter, &descriptor_table_cbs_5fnode_2eproto_once,
      file_level_metadata_cbs_5fnode_2eproto[0]);
}

// ===================================================================

class CBSNode_State::_Internal {
 public:
};

CBSNode_State::CBSNode_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBSProto.CBSNode.State)
}
CBSNode_State::CBSNode_State(const CBSNode_State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&time_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CBSProto.CBSNode.State)
}

inline void CBSNode_State::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&time_)) + sizeof(y_));
}

CBSNode_State::~CBSNode_State() {
  // @@protoc_insertion_point(destructor:CBSProto.CBSNode.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBSNode_State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBSNode_State::ArenaDtor(void* object) {
  CBSNode_State* _this = reinterpret_cast< CBSNode_State* >(object);
  (void)_this;
}
void CBSNode_State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBSNode_State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBSNode_State::Clear() {
// @@protoc_insertion_point(message_clear_start:CBSProto.CBSNode.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&time_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBSNode_State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBSNode_State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBSProto.CBSNode.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBSProto.CBSNode.State)
  return target;
}

size_t CBSNode_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBSProto.CBSNode.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBSNode_State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBSNode_State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBSNode_State::GetClassData() const { return &_class_data_; }

void CBSNode_State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CBSNode_State *>(to)->MergeFrom(
      static_cast<const CBSNode_State &>(from));
}


void CBSNode_State::MergeFrom(const CBSNode_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBSProto.CBSNode.State)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBSNode_State::CopyFrom(const CBSNode_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBSProto.CBSNode.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBSNode_State::IsInitialized() const {
  return true;
}

void CBSNode_State::InternalSwap(CBSNode_State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBSNode_State, y_)
      + sizeof(CBSNode_State::y_)
      - PROTOBUF_FIELD_OFFSET(CBSNode_State, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBSNode_State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cbs_5fnode_2eproto_getter, &descriptor_table_cbs_5fnode_2eproto_once,
      file_level_metadata_cbs_5fnode_2eproto[1]);
}

// ===================================================================

class CBSNode_Constraints_VertexConstraint::_Internal {
 public:
};

CBSNode_Constraints_VertexConstraint::CBSNode_Constraints_VertexConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBSProto.CBSNode.Constraints.VertexConstraint)
}
CBSNode_Constraints_VertexConstraint::CBSNode_Constraints_VertexConstraint(const CBSNode_Constraints_VertexConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_who_) -
    reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
  // @@protoc_insertion_point(copy_constructor:CBSProto.CBSNode.Constraints.VertexConstraint)
}

inline void CBSNode_Constraints_VertexConstraint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_who_) -
    reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
}

CBSNode_Constraints_VertexConstraint::~CBSNode_Constraints_VertexConstraint() {
  // @@protoc_insertion_point(destructor:CBSProto.CBSNode.Constraints.VertexConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBSNode_Constraints_VertexConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBSNode_Constraints_VertexConstraint::ArenaDtor(void* object) {
  CBSNode_Constraints_VertexConstraint* _this = reinterpret_cast< CBSNode_Constraints_VertexConstraint* >(object);
  (void)_this;
}
void CBSNode_Constraints_VertexConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBSNode_Constraints_VertexConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBSNode_Constraints_VertexConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:CBSProto.CBSNode.Constraints.VertexConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_who_) -
      reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBSNode_Constraints_VertexConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 for_who = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          for_who_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBSNode_Constraints_VertexConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBSProto.CBSNode.Constraints.VertexConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int32 for_who = 4;
  if (this->_internal_for_who() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_for_who(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBSProto.CBSNode.Constraints.VertexConstraint)
  return target;
}

size_t CBSNode_Constraints_VertexConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBSProto.CBSNode.Constraints.VertexConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 for_who = 4;
  if (this->_internal_for_who() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_for_who());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBSNode_Constraints_VertexConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBSNode_Constraints_VertexConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBSNode_Constraints_VertexConstraint::GetClassData() const { return &_class_data_; }

void CBSNode_Constraints_VertexConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CBSNode_Constraints_VertexConstraint *>(to)->MergeFrom(
      static_cast<const CBSNode_Constraints_VertexConstraint &>(from));
}


void CBSNode_Constraints_VertexConstraint::MergeFrom(const CBSNode_Constraints_VertexConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBSProto.CBSNode.Constraints.VertexConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_for_who() != 0) {
    _internal_set_for_who(from._internal_for_who());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBSNode_Constraints_VertexConstraint::CopyFrom(const CBSNode_Constraints_VertexConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBSProto.CBSNode.Constraints.VertexConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBSNode_Constraints_VertexConstraint::IsInitialized() const {
  return true;
}

void CBSNode_Constraints_VertexConstraint::InternalSwap(CBSNode_Constraints_VertexConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBSNode_Constraints_VertexConstraint, for_who_)
      + sizeof(CBSNode_Constraints_VertexConstraint::for_who_)
      - PROTOBUF_FIELD_OFFSET(CBSNode_Constraints_VertexConstraint, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBSNode_Constraints_VertexConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cbs_5fnode_2eproto_getter, &descriptor_table_cbs_5fnode_2eproto_once,
      file_level_metadata_cbs_5fnode_2eproto[2]);
}

// ===================================================================

class CBSNode_Constraints_EdgeConstraint::_Internal {
 public:
};

CBSNode_Constraints_EdgeConstraint::CBSNode_Constraints_EdgeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBSProto.CBSNode.Constraints.EdgeConstraint)
}
CBSNode_Constraints_EdgeConstraint::CBSNode_Constraints_EdgeConstraint(const CBSNode_Constraints_EdgeConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_who_) -
    reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
  // @@protoc_insertion_point(copy_constructor:CBSProto.CBSNode.Constraints.EdgeConstraint)
}

inline void CBSNode_Constraints_EdgeConstraint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_who_) -
    reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
}

CBSNode_Constraints_EdgeConstraint::~CBSNode_Constraints_EdgeConstraint() {
  // @@protoc_insertion_point(destructor:CBSProto.CBSNode.Constraints.EdgeConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBSNode_Constraints_EdgeConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBSNode_Constraints_EdgeConstraint::ArenaDtor(void* object) {
  CBSNode_Constraints_EdgeConstraint* _this = reinterpret_cast< CBSNode_Constraints_EdgeConstraint* >(object);
  (void)_this;
}
void CBSNode_Constraints_EdgeConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBSNode_Constraints_EdgeConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBSNode_Constraints_EdgeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:CBSProto.CBSNode.Constraints.EdgeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_who_) -
      reinterpret_cast<char*>(&time_)) + sizeof(for_who_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBSNode_Constraints_EdgeConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          x2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          y2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 for_who = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          for_who_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBSNode_Constraints_EdgeConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBSProto.CBSNode.Constraints.EdgeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x1(), target);
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y1(), target);
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_x2(), target);
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_y2(), target);
  }

  // int32 for_who = 6;
  if (this->_internal_for_who() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_for_who(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBSProto.CBSNode.Constraints.EdgeConstraint)
  return target;
}

size_t CBSNode_Constraints_EdgeConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBSProto.CBSNode.Constraints.EdgeConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x1());
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y1());
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x2());
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y2());
  }

  // int32 for_who = 6;
  if (this->_internal_for_who() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_for_who());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBSNode_Constraints_EdgeConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBSNode_Constraints_EdgeConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBSNode_Constraints_EdgeConstraint::GetClassData() const { return &_class_data_; }

void CBSNode_Constraints_EdgeConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CBSNode_Constraints_EdgeConstraint *>(to)->MergeFrom(
      static_cast<const CBSNode_Constraints_EdgeConstraint &>(from));
}


void CBSNode_Constraints_EdgeConstraint::MergeFrom(const CBSNode_Constraints_EdgeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBSProto.CBSNode.Constraints.EdgeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_x1() != 0) {
    _internal_set_x1(from._internal_x1());
  }
  if (from._internal_y1() != 0) {
    _internal_set_y1(from._internal_y1());
  }
  if (from._internal_x2() != 0) {
    _internal_set_x2(from._internal_x2());
  }
  if (from._internal_y2() != 0) {
    _internal_set_y2(from._internal_y2());
  }
  if (from._internal_for_who() != 0) {
    _internal_set_for_who(from._internal_for_who());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBSNode_Constraints_EdgeConstraint::CopyFrom(const CBSNode_Constraints_EdgeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBSProto.CBSNode.Constraints.EdgeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBSNode_Constraints_EdgeConstraint::IsInitialized() const {
  return true;
}

void CBSNode_Constraints_EdgeConstraint::InternalSwap(CBSNode_Constraints_EdgeConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBSNode_Constraints_EdgeConstraint, for_who_)
      + sizeof(CBSNode_Constraints_EdgeConstraint::for_who_)
      - PROTOBUF_FIELD_OFFSET(CBSNode_Constraints_EdgeConstraint, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBSNode_Constraints_EdgeConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cbs_5fnode_2eproto_getter, &descriptor_table_cbs_5fnode_2eproto_once,
      file_level_metadata_cbs_5fnode_2eproto[3]);
}

// ===================================================================

class CBSNode_Constraints::_Internal {
 public:
};

CBSNode_Constraints::CBSNode_Constraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertex_constraints_(arena),
  edge_constraints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBSProto.CBSNode.Constraints)
}
CBSNode_Constraints::CBSNode_Constraints(const CBSNode_Constraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertex_constraints_(from.vertex_constraints_),
      edge_constraints_(from.edge_constraints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBSProto.CBSNode.Constraints)
}

inline void CBSNode_Constraints::SharedCtor() {
}

CBSNode_Constraints::~CBSNode_Constraints() {
  // @@protoc_insertion_point(destructor:CBSProto.CBSNode.Constraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBSNode_Constraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBSNode_Constraints::ArenaDtor(void* object) {
  CBSNode_Constraints* _this = reinterpret_cast< CBSNode_Constraints* >(object);
  (void)_this;
}
void CBSNode_Constraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBSNode_Constraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBSNode_Constraints::Clear() {
// @@protoc_insertion_point(message_clear_start:CBSProto.CBSNode.Constraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_constraints_.Clear();
  edge_constraints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBSNode_Constraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CBSProto.CBSNode.Constraints.VertexConstraint vertex_constraints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CBSProto.CBSNode.Constraints.EdgeConstraint edge_constraints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBSNode_Constraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBSProto.CBSNode.Constraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CBSProto.CBSNode.Constraints.VertexConstraint vertex_constraints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertex_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertex_constraints(i), target, stream);
  }

  // repeated .CBSProto.CBSNode.Constraints.EdgeConstraint edge_constraints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edge_constraints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBSProto.CBSNode.Constraints)
  return target;
}

size_t CBSNode_Constraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBSProto.CBSNode.Constraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CBSProto.CBSNode.Constraints.VertexConstraint vertex_constraints = 1;
  total_size += 1UL * this->_internal_vertex_constraints_size();
  for (const auto& msg : this->vertex_constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CBSProto.CBSNode.Constraints.EdgeConstraint edge_constraints = 2;
  total_size += 1UL * this->_internal_edge_constraints_size();
  for (const auto& msg : this->edge_constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBSNode_Constraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBSNode_Constraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBSNode_Constraints::GetClassData() const { return &_class_data_; }

void CBSNode_Constraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CBSNode_Constraints *>(to)->MergeFrom(
      static_cast<const CBSNode_Constraints &>(from));
}


void CBSNode_Constraints::MergeFrom(const CBSNode_Constraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBSProto.CBSNode.Constraints)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_constraints_.MergeFrom(from.vertex_constraints_);
  edge_constraints_.MergeFrom(from.edge_constraints_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBSNode_Constraints::CopyFrom(const CBSNode_Constraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBSProto.CBSNode.Constraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBSNode_Constraints::IsInitialized() const {
  return true;
}

void CBSNode_Constraints::InternalSwap(CBSNode_Constraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertex_constraints_.InternalSwap(&other->vertex_constraints_);
  edge_constraints_.InternalSwap(&other->edge_constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBSNode_Constraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cbs_5fnode_2eproto_getter, &descriptor_table_cbs_5fnode_2eproto_once,
      file_level_metadata_cbs_5fnode_2eproto[4]);
}

// ===================================================================

class CBSNode_PathEntry::_Internal {
 public:
  static const ::CBSProto::CBSNode_State& state(const CBSNode_PathEntry* msg);
  static const ::CBSProto::CBSNode_PathEntry& parent(const CBSNode_PathEntry* msg);
};

const ::CBSProto::CBSNode_State&
CBSNode_PathEntry::_Internal::state(const CBSNode_PathEntry* msg) {
  return *msg->state_;
}
const ::CBSProto::CBSNode_PathEntry&
CBSNode_PathEntry::_Internal::parent(const CBSNode_PathEntry* msg) {
  return *msg->parent_;
}
CBSNode_PathEntry::CBSNode_PathEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBSProto.CBSNode.PathEntry)
}
CBSNode_PathEntry::CBSNode_PathEntry(const CBSNode_PathEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::CBSProto::CBSNode_State(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::CBSProto::CBSNode_PathEntry(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  ::memcpy(&fscore_, &from.fscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&focalscore_) -
    reinterpret_cast<char*>(&fscore_)) + sizeof(focalscore_));
  // @@protoc_insertion_point(copy_constructor:CBSProto.CBSNode.PathEntry)
}

inline void CBSNode_PathEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&focalscore_) -
    reinterpret_cast<char*>(&state_)) + sizeof(focalscore_));
}

CBSNode_PathEntry::~CBSNode_PathEntry() {
  // @@protoc_insertion_point(destructor:CBSProto.CBSNode.PathEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBSNode_PathEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete parent_;
}

void CBSNode_PathEntry::ArenaDtor(void* object) {
  CBSNode_PathEntry* _this = reinterpret_cast< CBSNode_PathEntry* >(object);
  (void)_this;
}
void CBSNode_PathEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBSNode_PathEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBSNode_PathEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CBSProto.CBSNode.PathEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  ::memset(&fscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&focalscore_) -
      reinterpret_cast<char*>(&fscore_)) + sizeof(focalscore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBSNode_PathEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CBSProto.CBSNode.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fScore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gScore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 focalScore = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          focalscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CBSProto.CBSNode.PathEntry parent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBSNode_PathEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBSProto.CBSNode.PathEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CBSProto.CBSNode.State state = 1;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // int32 fScore = 2;
  if (this->_internal_fscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fscore(), target);
  }

  // int32 gScore = 3;
  if (this->_internal_gscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gscore(), target);
  }

  // int32 focalScore = 4;
  if (this->_internal_focalscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_focalscore(), target);
  }

  // .CBSProto.CBSNode.PathEntry parent = 5;
  if (this->_internal_has_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::parent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBSProto.CBSNode.PathEntry)
  return target;
}

size_t CBSNode_PathEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBSProto.CBSNode.PathEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CBSProto.CBSNode.State state = 1;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .CBSProto.CBSNode.PathEntry parent = 5;
  if (this->_internal_has_parent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // int32 fScore = 2;
  if (this->_internal_fscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fscore());
  }

  // int32 gScore = 3;
  if (this->_internal_gscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gscore());
  }

  // int32 focalScore = 4;
  if (this->_internal_focalscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_focalscore());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBSNode_PathEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBSNode_PathEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBSNode_PathEntry::GetClassData() const { return &_class_data_; }

void CBSNode_PathEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CBSNode_PathEntry *>(to)->MergeFrom(
      static_cast<const CBSNode_PathEntry &>(from));
}


void CBSNode_PathEntry::MergeFrom(const CBSNode_PathEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBSProto.CBSNode.PathEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::CBSProto::CBSNode_State::MergeFrom(from._internal_state());
  }
  if (from._internal_has_parent()) {
    _internal_mutable_parent()->::CBSProto::CBSNode_PathEntry::MergeFrom(from._internal_parent());
  }
  if (from._internal_fscore() != 0) {
    _internal_set_fscore(from._internal_fscore());
  }
  if (from._internal_gscore() != 0) {
    _internal_set_gscore(from._internal_gscore());
  }
  if (from._internal_focalscore() != 0) {
    _internal_set_focalscore(from._internal_focalscore());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBSNode_PathEntry::CopyFrom(const CBSNode_PathEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBSProto.CBSNode.PathEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBSNode_PathEntry::IsInitialized() const {
  return true;
}

void CBSNode_PathEntry::InternalSwap(CBSNode_PathEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBSNode_PathEntry, focalscore_)
      + sizeof(CBSNode_PathEntry::focalscore_)
      - PROTOBUF_FIELD_OFFSET(CBSNode_PathEntry, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBSNode_PathEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cbs_5fnode_2eproto_getter, &descriptor_table_cbs_5fnode_2eproto_once,
      file_level_metadata_cbs_5fnode_2eproto[5]);
}

// ===================================================================

class CBSNode_Path::_Internal {
 public:
};

CBSNode_Path::CBSNode_Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBSProto.CBSNode.Path)
}
CBSNode_Path::CBSNode_Path(const CBSNode_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBSProto.CBSNode.Path)
}

inline void CBSNode_Path::SharedCtor() {
}

CBSNode_Path::~CBSNode_Path() {
  // @@protoc_insertion_point(destructor:CBSProto.CBSNode.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBSNode_Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBSNode_Path::ArenaDtor(void* object) {
  CBSNode_Path* _this = reinterpret_cast< CBSNode_Path* >(object);
  (void)_this;
}
void CBSNode_Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBSNode_Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBSNode_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:CBSProto.CBSNode.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBSNode_Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CBSProto.CBSNode.PathEntry path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBSNode_Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBSProto.CBSNode.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CBSProto.CBSNode.PathEntry path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_path(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBSProto.CBSNode.Path)
  return target;
}

size_t CBSNode_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBSProto.CBSNode.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CBSProto.CBSNode.PathEntry path = 1;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBSNode_Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBSNode_Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBSNode_Path::GetClassData() const { return &_class_data_; }

void CBSNode_Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CBSNode_Path *>(to)->MergeFrom(
      static_cast<const CBSNode_Path &>(from));
}


void CBSNode_Path::MergeFrom(const CBSNode_Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBSProto.CBSNode.Path)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBSNode_Path::CopyFrom(const CBSNode_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBSProto.CBSNode.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBSNode_Path::IsInitialized() const {
  return true;
}

void CBSNode_Path::InternalSwap(CBSNode_Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBSNode_Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cbs_5fnode_2eproto_getter, &descriptor_table_cbs_5fnode_2eproto_once,
      file_level_metadata_cbs_5fnode_2eproto[6]);
}

// ===================================================================

class CBSNode::_Internal {
 public:
};

CBSNode::CBSNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cost_matrix_(arena),
  constraint_sets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBSProto.CBSNode)
}
CBSNode::CBSNode(const CBSNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cost_matrix_(from.cost_matrix_),
      constraint_sets_(from.constraint_sets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBSProto.CBSNode)
}

inline void CBSNode::SharedCtor() {
}

CBSNode::~CBSNode() {
  // @@protoc_insertion_point(destructor:CBSProto.CBSNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBSNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBSNode::ArenaDtor(void* object) {
  CBSNode* _this = reinterpret_cast< CBSNode* >(object);
  (void)_this;
}
void CBSNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBSNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBSNode::Clear() {
// @@protoc_insertion_point(message_clear_start:CBSProto.CBSNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_matrix_.Clear();
  constraint_sets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBSNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CBSProto.CBSNode.Path cost_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cost_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CBSProto.CBSNode.Constraints constraint_sets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraint_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBSNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBSProto.CBSNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CBSProto.CBSNode.Path cost_matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cost_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cost_matrix(i), target, stream);
  }

  // repeated .CBSProto.CBSNode.Constraints constraint_sets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraint_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_constraint_sets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBSProto.CBSNode)
  return target;
}

size_t CBSNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBSProto.CBSNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CBSProto.CBSNode.Path cost_matrix = 1;
  total_size += 1UL * this->_internal_cost_matrix_size();
  for (const auto& msg : this->cost_matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CBSProto.CBSNode.Constraints constraint_sets = 2;
  total_size += 1UL * this->_internal_constraint_sets_size();
  for (const auto& msg : this->constraint_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBSNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBSNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBSNode::GetClassData() const { return &_class_data_; }

void CBSNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CBSNode *>(to)->MergeFrom(
      static_cast<const CBSNode &>(from));
}


void CBSNode::MergeFrom(const CBSNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBSProto.CBSNode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_matrix_.MergeFrom(from.cost_matrix_);
  constraint_sets_.MergeFrom(from.constraint_sets_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBSNode::CopyFrom(const CBSNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBSProto.CBSNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBSNode::IsInitialized() const {
  return true;
}

void CBSNode::InternalSwap(CBSNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cost_matrix_.InternalSwap(&other->cost_matrix_);
  constraint_sets_.InternalSwap(&other->constraint_sets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBSNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cbs_5fnode_2eproto_getter, &descriptor_table_cbs_5fnode_2eproto_once,
      file_level_metadata_cbs_5fnode_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace CBSProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CBSProto::CBSNode_Location* Arena::CreateMaybeMessage< ::CBSProto::CBSNode_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBSProto::CBSNode_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::CBSProto::CBSNode_State* Arena::CreateMaybeMessage< ::CBSProto::CBSNode_State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBSProto::CBSNode_State >(arena);
}
template<> PROTOBUF_NOINLINE ::CBSProto::CBSNode_Constraints_VertexConstraint* Arena::CreateMaybeMessage< ::CBSProto::CBSNode_Constraints_VertexConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBSProto::CBSNode_Constraints_VertexConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::CBSProto::CBSNode_Constraints_EdgeConstraint* Arena::CreateMaybeMessage< ::CBSProto::CBSNode_Constraints_EdgeConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBSProto::CBSNode_Constraints_EdgeConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::CBSProto::CBSNode_Constraints* Arena::CreateMaybeMessage< ::CBSProto::CBSNode_Constraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBSProto::CBSNode_Constraints >(arena);
}
template<> PROTOBUF_NOINLINE ::CBSProto::CBSNode_PathEntry* Arena::CreateMaybeMessage< ::CBSProto::CBSNode_PathEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBSProto::CBSNode_PathEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CBSProto::CBSNode_Path* Arena::CreateMaybeMessage< ::CBSProto::CBSNode_Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBSProto::CBSNode_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::CBSProto::CBSNode* Arena::CreateMaybeMessage< ::CBSProto::CBSNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBSProto::CBSNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
