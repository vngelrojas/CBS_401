// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cbs_node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cbs_5fnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cbs_5fnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cbs_5fnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cbs_5fnode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cbs_5fnode_2eproto;
namespace CBSProto {
class CBSNode;
struct CBSNodeDefaultTypeInternal;
extern CBSNodeDefaultTypeInternal _CBSNode_default_instance_;
class CBSNode_Constraints;
struct CBSNode_ConstraintsDefaultTypeInternal;
extern CBSNode_ConstraintsDefaultTypeInternal _CBSNode_Constraints_default_instance_;
class CBSNode_Constraints_EdgeConstraint;
struct CBSNode_Constraints_EdgeConstraintDefaultTypeInternal;
extern CBSNode_Constraints_EdgeConstraintDefaultTypeInternal _CBSNode_Constraints_EdgeConstraint_default_instance_;
class CBSNode_Constraints_VertexConstraint;
struct CBSNode_Constraints_VertexConstraintDefaultTypeInternal;
extern CBSNode_Constraints_VertexConstraintDefaultTypeInternal _CBSNode_Constraints_VertexConstraint_default_instance_;
class CBSNode_Location;
struct CBSNode_LocationDefaultTypeInternal;
extern CBSNode_LocationDefaultTypeInternal _CBSNode_Location_default_instance_;
class CBSNode_Path;
struct CBSNode_PathDefaultTypeInternal;
extern CBSNode_PathDefaultTypeInternal _CBSNode_Path_default_instance_;
class CBSNode_PathEntry;
struct CBSNode_PathEntryDefaultTypeInternal;
extern CBSNode_PathEntryDefaultTypeInternal _CBSNode_PathEntry_default_instance_;
class CBSNode_State;
struct CBSNode_StateDefaultTypeInternal;
extern CBSNode_StateDefaultTypeInternal _CBSNode_State_default_instance_;
}  // namespace CBSProto
PROTOBUF_NAMESPACE_OPEN
template<> ::CBSProto::CBSNode* Arena::CreateMaybeMessage<::CBSProto::CBSNode>(Arena*);
template<> ::CBSProto::CBSNode_Constraints* Arena::CreateMaybeMessage<::CBSProto::CBSNode_Constraints>(Arena*);
template<> ::CBSProto::CBSNode_Constraints_EdgeConstraint* Arena::CreateMaybeMessage<::CBSProto::CBSNode_Constraints_EdgeConstraint>(Arena*);
template<> ::CBSProto::CBSNode_Constraints_VertexConstraint* Arena::CreateMaybeMessage<::CBSProto::CBSNode_Constraints_VertexConstraint>(Arena*);
template<> ::CBSProto::CBSNode_Location* Arena::CreateMaybeMessage<::CBSProto::CBSNode_Location>(Arena*);
template<> ::CBSProto::CBSNode_Path* Arena::CreateMaybeMessage<::CBSProto::CBSNode_Path>(Arena*);
template<> ::CBSProto::CBSNode_PathEntry* Arena::CreateMaybeMessage<::CBSProto::CBSNode_PathEntry>(Arena*);
template<> ::CBSProto::CBSNode_State* Arena::CreateMaybeMessage<::CBSProto::CBSNode_State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CBSProto {

// ===================================================================

class CBSNode_Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBSNode.Location) */ {
 public:
  inline CBSNode_Location() : CBSNode_Location(nullptr) {}
  ~CBSNode_Location() override;
  explicit constexpr CBSNode_Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBSNode_Location(const CBSNode_Location& from);
  CBSNode_Location(CBSNode_Location&& from) noexcept
    : CBSNode_Location() {
    *this = ::std::move(from);
  }

  inline CBSNode_Location& operator=(const CBSNode_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBSNode_Location& operator=(CBSNode_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBSNode_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBSNode_Location* internal_default_instance() {
    return reinterpret_cast<const CBSNode_Location*>(
               &_CBSNode_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBSNode_Location& a, CBSNode_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(CBSNode_Location* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBSNode_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBSNode_Location* New() const final {
    return new CBSNode_Location();
  }

  CBSNode_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBSNode_Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBSNode_Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBSNode_Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBSNode_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBSNode.Location";
  }
  protected:
  explicit CBSNode_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBSProto.CBSNode.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_5fnode_2eproto;
};
// -------------------------------------------------------------------

class CBSNode_State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBSNode.State) */ {
 public:
  inline CBSNode_State() : CBSNode_State(nullptr) {}
  ~CBSNode_State() override;
  explicit constexpr CBSNode_State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBSNode_State(const CBSNode_State& from);
  CBSNode_State(CBSNode_State&& from) noexcept
    : CBSNode_State() {
    *this = ::std::move(from);
  }

  inline CBSNode_State& operator=(const CBSNode_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBSNode_State& operator=(CBSNode_State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBSNode_State& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBSNode_State* internal_default_instance() {
    return reinterpret_cast<const CBSNode_State*>(
               &_CBSNode_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CBSNode_State& a, CBSNode_State& b) {
    a.Swap(&b);
  }
  inline void Swap(CBSNode_State* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBSNode_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBSNode_State* New() const final {
    return new CBSNode_State();
  }

  CBSNode_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBSNode_State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBSNode_State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBSNode_State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBSNode_State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBSNode.State";
  }
  protected:
  explicit CBSNode_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 2;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 3;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBSProto.CBSNode.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_5fnode_2eproto;
};
// -------------------------------------------------------------------

class CBSNode_Constraints_VertexConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBSNode.Constraints.VertexConstraint) */ {
 public:
  inline CBSNode_Constraints_VertexConstraint() : CBSNode_Constraints_VertexConstraint(nullptr) {}
  ~CBSNode_Constraints_VertexConstraint() override;
  explicit constexpr CBSNode_Constraints_VertexConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBSNode_Constraints_VertexConstraint(const CBSNode_Constraints_VertexConstraint& from);
  CBSNode_Constraints_VertexConstraint(CBSNode_Constraints_VertexConstraint&& from) noexcept
    : CBSNode_Constraints_VertexConstraint() {
    *this = ::std::move(from);
  }

  inline CBSNode_Constraints_VertexConstraint& operator=(const CBSNode_Constraints_VertexConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBSNode_Constraints_VertexConstraint& operator=(CBSNode_Constraints_VertexConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBSNode_Constraints_VertexConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBSNode_Constraints_VertexConstraint* internal_default_instance() {
    return reinterpret_cast<const CBSNode_Constraints_VertexConstraint*>(
               &_CBSNode_Constraints_VertexConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CBSNode_Constraints_VertexConstraint& a, CBSNode_Constraints_VertexConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(CBSNode_Constraints_VertexConstraint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBSNode_Constraints_VertexConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBSNode_Constraints_VertexConstraint* New() const final {
    return new CBSNode_Constraints_VertexConstraint();
  }

  CBSNode_Constraints_VertexConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBSNode_Constraints_VertexConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBSNode_Constraints_VertexConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBSNode_Constraints_VertexConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBSNode_Constraints_VertexConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBSNode.Constraints.VertexConstraint";
  }
  protected:
  explicit CBSNode_Constraints_VertexConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kForWhoFieldNumber = 4,
  };
  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 2;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 3;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 for_who = 4;
  void clear_for_who();
  ::PROTOBUF_NAMESPACE_ID::int32 for_who() const;
  void set_for_who(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_for_who() const;
  void _internal_set_for_who(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBSProto.CBSNode.Constraints.VertexConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 for_who_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_5fnode_2eproto;
};
// -------------------------------------------------------------------

class CBSNode_Constraints_EdgeConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBSNode.Constraints.EdgeConstraint) */ {
 public:
  inline CBSNode_Constraints_EdgeConstraint() : CBSNode_Constraints_EdgeConstraint(nullptr) {}
  ~CBSNode_Constraints_EdgeConstraint() override;
  explicit constexpr CBSNode_Constraints_EdgeConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBSNode_Constraints_EdgeConstraint(const CBSNode_Constraints_EdgeConstraint& from);
  CBSNode_Constraints_EdgeConstraint(CBSNode_Constraints_EdgeConstraint&& from) noexcept
    : CBSNode_Constraints_EdgeConstraint() {
    *this = ::std::move(from);
  }

  inline CBSNode_Constraints_EdgeConstraint& operator=(const CBSNode_Constraints_EdgeConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBSNode_Constraints_EdgeConstraint& operator=(CBSNode_Constraints_EdgeConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBSNode_Constraints_EdgeConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBSNode_Constraints_EdgeConstraint* internal_default_instance() {
    return reinterpret_cast<const CBSNode_Constraints_EdgeConstraint*>(
               &_CBSNode_Constraints_EdgeConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CBSNode_Constraints_EdgeConstraint& a, CBSNode_Constraints_EdgeConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(CBSNode_Constraints_EdgeConstraint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBSNode_Constraints_EdgeConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBSNode_Constraints_EdgeConstraint* New() const final {
    return new CBSNode_Constraints_EdgeConstraint();
  }

  CBSNode_Constraints_EdgeConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBSNode_Constraints_EdgeConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBSNode_Constraints_EdgeConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBSNode_Constraints_EdgeConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBSNode_Constraints_EdgeConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBSNode.Constraints.EdgeConstraint";
  }
  protected:
  explicit CBSNode_Constraints_EdgeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kX1FieldNumber = 2,
    kY1FieldNumber = 3,
    kX2FieldNumber = 4,
    kY2FieldNumber = 5,
    kForWhoFieldNumber = 6,
  };
  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x1 = 2;
  void clear_x1();
  ::PROTOBUF_NAMESPACE_ID::int32 x1() const;
  void set_x1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x1() const;
  void _internal_set_x1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y1 = 3;
  void clear_y1();
  ::PROTOBUF_NAMESPACE_ID::int32 y1() const;
  void set_y1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y1() const;
  void _internal_set_y1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x2 = 4;
  void clear_x2();
  ::PROTOBUF_NAMESPACE_ID::int32 x2() const;
  void set_x2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x2() const;
  void _internal_set_x2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y2 = 5;
  void clear_y2();
  ::PROTOBUF_NAMESPACE_ID::int32 y2() const;
  void set_y2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y2() const;
  void _internal_set_y2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 for_who = 6;
  void clear_for_who();
  ::PROTOBUF_NAMESPACE_ID::int32 for_who() const;
  void set_for_who(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_for_who() const;
  void _internal_set_for_who(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBSProto.CBSNode.Constraints.EdgeConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 x1_;
  ::PROTOBUF_NAMESPACE_ID::int32 y1_;
  ::PROTOBUF_NAMESPACE_ID::int32 x2_;
  ::PROTOBUF_NAMESPACE_ID::int32 y2_;
  ::PROTOBUF_NAMESPACE_ID::int32 for_who_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_5fnode_2eproto;
};
// -------------------------------------------------------------------

class CBSNode_Constraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBSNode.Constraints) */ {
 public:
  inline CBSNode_Constraints() : CBSNode_Constraints(nullptr) {}
  ~CBSNode_Constraints() override;
  explicit constexpr CBSNode_Constraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBSNode_Constraints(const CBSNode_Constraints& from);
  CBSNode_Constraints(CBSNode_Constraints&& from) noexcept
    : CBSNode_Constraints() {
    *this = ::std::move(from);
  }

  inline CBSNode_Constraints& operator=(const CBSNode_Constraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBSNode_Constraints& operator=(CBSNode_Constraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBSNode_Constraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBSNode_Constraints* internal_default_instance() {
    return reinterpret_cast<const CBSNode_Constraints*>(
               &_CBSNode_Constraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CBSNode_Constraints& a, CBSNode_Constraints& b) {
    a.Swap(&b);
  }
  inline void Swap(CBSNode_Constraints* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBSNode_Constraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBSNode_Constraints* New() const final {
    return new CBSNode_Constraints();
  }

  CBSNode_Constraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBSNode_Constraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBSNode_Constraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBSNode_Constraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBSNode_Constraints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBSNode.Constraints";
  }
  protected:
  explicit CBSNode_Constraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBSNode_Constraints_VertexConstraint VertexConstraint;
  typedef CBSNode_Constraints_EdgeConstraint EdgeConstraint;

  // accessors -------------------------------------------------------

  enum : int {
    kVertexConstraintsFieldNumber = 1,
    kEdgeConstraintsFieldNumber = 2,
  };
  // repeated .CBSProto.CBSNode.Constraints.VertexConstraint vertex_constraints = 1;
  int vertex_constraints_size() const;
  private:
  int _internal_vertex_constraints_size() const;
  public:
  void clear_vertex_constraints();
  ::CBSProto::CBSNode_Constraints_VertexConstraint* mutable_vertex_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_VertexConstraint >*
      mutable_vertex_constraints();
  private:
  const ::CBSProto::CBSNode_Constraints_VertexConstraint& _internal_vertex_constraints(int index) const;
  ::CBSProto::CBSNode_Constraints_VertexConstraint* _internal_add_vertex_constraints();
  public:
  const ::CBSProto::CBSNode_Constraints_VertexConstraint& vertex_constraints(int index) const;
  ::CBSProto::CBSNode_Constraints_VertexConstraint* add_vertex_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_VertexConstraint >&
      vertex_constraints() const;

  // repeated .CBSProto.CBSNode.Constraints.EdgeConstraint edge_constraints = 2;
  int edge_constraints_size() const;
  private:
  int _internal_edge_constraints_size() const;
  public:
  void clear_edge_constraints();
  ::CBSProto::CBSNode_Constraints_EdgeConstraint* mutable_edge_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_EdgeConstraint >*
      mutable_edge_constraints();
  private:
  const ::CBSProto::CBSNode_Constraints_EdgeConstraint& _internal_edge_constraints(int index) const;
  ::CBSProto::CBSNode_Constraints_EdgeConstraint* _internal_add_edge_constraints();
  public:
  const ::CBSProto::CBSNode_Constraints_EdgeConstraint& edge_constraints(int index) const;
  ::CBSProto::CBSNode_Constraints_EdgeConstraint* add_edge_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_EdgeConstraint >&
      edge_constraints() const;

  // @@protoc_insertion_point(class_scope:CBSProto.CBSNode.Constraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_VertexConstraint > vertex_constraints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_EdgeConstraint > edge_constraints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_5fnode_2eproto;
};
// -------------------------------------------------------------------

class CBSNode_PathEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBSNode.PathEntry) */ {
 public:
  inline CBSNode_PathEntry() : CBSNode_PathEntry(nullptr) {}
  ~CBSNode_PathEntry() override;
  explicit constexpr CBSNode_PathEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBSNode_PathEntry(const CBSNode_PathEntry& from);
  CBSNode_PathEntry(CBSNode_PathEntry&& from) noexcept
    : CBSNode_PathEntry() {
    *this = ::std::move(from);
  }

  inline CBSNode_PathEntry& operator=(const CBSNode_PathEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBSNode_PathEntry& operator=(CBSNode_PathEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBSNode_PathEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBSNode_PathEntry* internal_default_instance() {
    return reinterpret_cast<const CBSNode_PathEntry*>(
               &_CBSNode_PathEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CBSNode_PathEntry& a, CBSNode_PathEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CBSNode_PathEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBSNode_PathEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBSNode_PathEntry* New() const final {
    return new CBSNode_PathEntry();
  }

  CBSNode_PathEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBSNode_PathEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBSNode_PathEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBSNode_PathEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBSNode_PathEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBSNode.PathEntry";
  }
  protected:
  explicit CBSNode_PathEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kParentFieldNumber = 5,
    kFScoreFieldNumber = 2,
    kGScoreFieldNumber = 3,
    kFocalScoreFieldNumber = 4,
  };
  // .CBSProto.CBSNode.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::CBSProto::CBSNode_State& state() const;
  PROTOBUF_MUST_USE_RESULT ::CBSProto::CBSNode_State* release_state();
  ::CBSProto::CBSNode_State* mutable_state();
  void set_allocated_state(::CBSProto::CBSNode_State* state);
  private:
  const ::CBSProto::CBSNode_State& _internal_state() const;
  ::CBSProto::CBSNode_State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::CBSProto::CBSNode_State* state);
  ::CBSProto::CBSNode_State* unsafe_arena_release_state();

  // .CBSProto.CBSNode.PathEntry parent = 5;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  const ::CBSProto::CBSNode_PathEntry& parent() const;
  PROTOBUF_MUST_USE_RESULT ::CBSProto::CBSNode_PathEntry* release_parent();
  ::CBSProto::CBSNode_PathEntry* mutable_parent();
  void set_allocated_parent(::CBSProto::CBSNode_PathEntry* parent);
  private:
  const ::CBSProto::CBSNode_PathEntry& _internal_parent() const;
  ::CBSProto::CBSNode_PathEntry* _internal_mutable_parent();
  public:
  void unsafe_arena_set_allocated_parent(
      ::CBSProto::CBSNode_PathEntry* parent);
  ::CBSProto::CBSNode_PathEntry* unsafe_arena_release_parent();

  // int32 fScore = 2;
  void clear_fscore();
  ::PROTOBUF_NAMESPACE_ID::int32 fscore() const;
  void set_fscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fscore() const;
  void _internal_set_fscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gScore = 3;
  void clear_gscore();
  ::PROTOBUF_NAMESPACE_ID::int32 gscore() const;
  void set_gscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gscore() const;
  void _internal_set_gscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 focalScore = 4;
  void clear_focalscore();
  ::PROTOBUF_NAMESPACE_ID::int32 focalscore() const;
  void set_focalscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_focalscore() const;
  void _internal_set_focalscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBSProto.CBSNode.PathEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CBSProto::CBSNode_State* state_;
  ::CBSProto::CBSNode_PathEntry* parent_;
  ::PROTOBUF_NAMESPACE_ID::int32 fscore_;
  ::PROTOBUF_NAMESPACE_ID::int32 gscore_;
  ::PROTOBUF_NAMESPACE_ID::int32 focalscore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_5fnode_2eproto;
};
// -------------------------------------------------------------------

class CBSNode_Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBSNode.Path) */ {
 public:
  inline CBSNode_Path() : CBSNode_Path(nullptr) {}
  ~CBSNode_Path() override;
  explicit constexpr CBSNode_Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBSNode_Path(const CBSNode_Path& from);
  CBSNode_Path(CBSNode_Path&& from) noexcept
    : CBSNode_Path() {
    *this = ::std::move(from);
  }

  inline CBSNode_Path& operator=(const CBSNode_Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBSNode_Path& operator=(CBSNode_Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBSNode_Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBSNode_Path* internal_default_instance() {
    return reinterpret_cast<const CBSNode_Path*>(
               &_CBSNode_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CBSNode_Path& a, CBSNode_Path& b) {
    a.Swap(&b);
  }
  inline void Swap(CBSNode_Path* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBSNode_Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBSNode_Path* New() const final {
    return new CBSNode_Path();
  }

  CBSNode_Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBSNode_Path>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBSNode_Path& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBSNode_Path& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBSNode_Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBSNode.Path";
  }
  protected:
  explicit CBSNode_Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // repeated .CBSProto.CBSNode.PathEntry path = 1;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  ::CBSProto::CBSNode_PathEntry* mutable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_PathEntry >*
      mutable_path();
  private:
  const ::CBSProto::CBSNode_PathEntry& _internal_path(int index) const;
  ::CBSProto::CBSNode_PathEntry* _internal_add_path();
  public:
  const ::CBSProto::CBSNode_PathEntry& path(int index) const;
  ::CBSProto::CBSNode_PathEntry* add_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_PathEntry >&
      path() const;

  // @@protoc_insertion_point(class_scope:CBSProto.CBSNode.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_PathEntry > path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_5fnode_2eproto;
};
// -------------------------------------------------------------------

class CBSNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBSNode) */ {
 public:
  inline CBSNode() : CBSNode(nullptr) {}
  ~CBSNode() override;
  explicit constexpr CBSNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBSNode(const CBSNode& from);
  CBSNode(CBSNode&& from) noexcept
    : CBSNode() {
    *this = ::std::move(from);
  }

  inline CBSNode& operator=(const CBSNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBSNode& operator=(CBSNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBSNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBSNode* internal_default_instance() {
    return reinterpret_cast<const CBSNode*>(
               &_CBSNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CBSNode& a, CBSNode& b) {
    a.Swap(&b);
  }
  inline void Swap(CBSNode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBSNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBSNode* New() const final {
    return new CBSNode();
  }

  CBSNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBSNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBSNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBSNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBSNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBSNode";
  }
  protected:
  explicit CBSNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBSNode_Location Location;
  typedef CBSNode_State State;
  typedef CBSNode_Constraints Constraints;
  typedef CBSNode_PathEntry PathEntry;
  typedef CBSNode_Path Path;

  // accessors -------------------------------------------------------

  enum : int {
    kCostMatrixFieldNumber = 1,
    kConstraintSetsFieldNumber = 2,
  };
  // repeated .CBSProto.CBSNode.Path cost_matrix = 1;
  int cost_matrix_size() const;
  private:
  int _internal_cost_matrix_size() const;
  public:
  void clear_cost_matrix();
  ::CBSProto::CBSNode_Path* mutable_cost_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Path >*
      mutable_cost_matrix();
  private:
  const ::CBSProto::CBSNode_Path& _internal_cost_matrix(int index) const;
  ::CBSProto::CBSNode_Path* _internal_add_cost_matrix();
  public:
  const ::CBSProto::CBSNode_Path& cost_matrix(int index) const;
  ::CBSProto::CBSNode_Path* add_cost_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Path >&
      cost_matrix() const;

  // repeated .CBSProto.CBSNode.Constraints constraint_sets = 2;
  int constraint_sets_size() const;
  private:
  int _internal_constraint_sets_size() const;
  public:
  void clear_constraint_sets();
  ::CBSProto::CBSNode_Constraints* mutable_constraint_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints >*
      mutable_constraint_sets();
  private:
  const ::CBSProto::CBSNode_Constraints& _internal_constraint_sets(int index) const;
  ::CBSProto::CBSNode_Constraints* _internal_add_constraint_sets();
  public:
  const ::CBSProto::CBSNode_Constraints& constraint_sets(int index) const;
  ::CBSProto::CBSNode_Constraints* add_constraint_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints >&
      constraint_sets() const;

  // @@protoc_insertion_point(class_scope:CBSProto.CBSNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Path > cost_matrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints > constraint_sets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_5fnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBSNode_Location

// int32 x = 1;
inline void CBSNode_Location::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Location::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Location::x() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Location.x)
  return _internal_x();
}
inline void CBSNode_Location::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void CBSNode_Location::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Location.x)
}

// int32 y = 2;
inline void CBSNode_Location::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Location::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Location::y() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Location.y)
  return _internal_y();
}
inline void CBSNode_Location::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void CBSNode_Location::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Location.y)
}

// -------------------------------------------------------------------

// CBSNode_State

// int32 time = 1;
inline void CBSNode_State::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_State::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_State::time() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.State.time)
  return _internal_time();
}
inline void CBSNode_State::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void CBSNode_State::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.State.time)
}

// int32 x = 2;
inline void CBSNode_State::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_State::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_State::x() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.State.x)
  return _internal_x();
}
inline void CBSNode_State::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void CBSNode_State::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.State.x)
}

// int32 y = 3;
inline void CBSNode_State::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_State::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_State::y() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.State.y)
  return _internal_y();
}
inline void CBSNode_State::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void CBSNode_State::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.State.y)
}

// -------------------------------------------------------------------

// CBSNode_Constraints_VertexConstraint

// int32 time = 1;
inline void CBSNode_Constraints_VertexConstraint::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_VertexConstraint::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_VertexConstraint::time() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.VertexConstraint.time)
  return _internal_time();
}
inline void CBSNode_Constraints_VertexConstraint::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void CBSNode_Constraints_VertexConstraint::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.VertexConstraint.time)
}

// int32 x = 2;
inline void CBSNode_Constraints_VertexConstraint::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_VertexConstraint::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_VertexConstraint::x() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.VertexConstraint.x)
  return _internal_x();
}
inline void CBSNode_Constraints_VertexConstraint::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void CBSNode_Constraints_VertexConstraint::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.VertexConstraint.x)
}

// int32 y = 3;
inline void CBSNode_Constraints_VertexConstraint::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_VertexConstraint::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_VertexConstraint::y() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.VertexConstraint.y)
  return _internal_y();
}
inline void CBSNode_Constraints_VertexConstraint::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void CBSNode_Constraints_VertexConstraint::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.VertexConstraint.y)
}

// int32 for_who = 4;
inline void CBSNode_Constraints_VertexConstraint::clear_for_who() {
  for_who_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_VertexConstraint::_internal_for_who() const {
  return for_who_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_VertexConstraint::for_who() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.VertexConstraint.for_who)
  return _internal_for_who();
}
inline void CBSNode_Constraints_VertexConstraint::_internal_set_for_who(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  for_who_ = value;
}
inline void CBSNode_Constraints_VertexConstraint::set_for_who(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_for_who(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.VertexConstraint.for_who)
}

// -------------------------------------------------------------------

// CBSNode_Constraints_EdgeConstraint

// int32 time = 1;
inline void CBSNode_Constraints_EdgeConstraint::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::time() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.EdgeConstraint.time)
  return _internal_time();
}
inline void CBSNode_Constraints_EdgeConstraint::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void CBSNode_Constraints_EdgeConstraint::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.EdgeConstraint.time)
}

// int32 x1 = 2;
inline void CBSNode_Constraints_EdgeConstraint::clear_x1() {
  x1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::_internal_x1() const {
  return x1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::x1() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.EdgeConstraint.x1)
  return _internal_x1();
}
inline void CBSNode_Constraints_EdgeConstraint::_internal_set_x1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x1_ = value;
}
inline void CBSNode_Constraints_EdgeConstraint::set_x1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.EdgeConstraint.x1)
}

// int32 y1 = 3;
inline void CBSNode_Constraints_EdgeConstraint::clear_y1() {
  y1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::_internal_y1() const {
  return y1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::y1() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.EdgeConstraint.y1)
  return _internal_y1();
}
inline void CBSNode_Constraints_EdgeConstraint::_internal_set_y1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y1_ = value;
}
inline void CBSNode_Constraints_EdgeConstraint::set_y1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.EdgeConstraint.y1)
}

// int32 x2 = 4;
inline void CBSNode_Constraints_EdgeConstraint::clear_x2() {
  x2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::_internal_x2() const {
  return x2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::x2() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.EdgeConstraint.x2)
  return _internal_x2();
}
inline void CBSNode_Constraints_EdgeConstraint::_internal_set_x2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x2_ = value;
}
inline void CBSNode_Constraints_EdgeConstraint::set_x2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.EdgeConstraint.x2)
}

// int32 y2 = 5;
inline void CBSNode_Constraints_EdgeConstraint::clear_y2() {
  y2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::_internal_y2() const {
  return y2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::y2() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.EdgeConstraint.y2)
  return _internal_y2();
}
inline void CBSNode_Constraints_EdgeConstraint::_internal_set_y2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y2_ = value;
}
inline void CBSNode_Constraints_EdgeConstraint::set_y2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.EdgeConstraint.y2)
}

// int32 for_who = 6;
inline void CBSNode_Constraints_EdgeConstraint::clear_for_who() {
  for_who_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::_internal_for_who() const {
  return for_who_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_Constraints_EdgeConstraint::for_who() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.EdgeConstraint.for_who)
  return _internal_for_who();
}
inline void CBSNode_Constraints_EdgeConstraint::_internal_set_for_who(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  for_who_ = value;
}
inline void CBSNode_Constraints_EdgeConstraint::set_for_who(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_for_who(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.Constraints.EdgeConstraint.for_who)
}

// -------------------------------------------------------------------

// CBSNode_Constraints

// repeated .CBSProto.CBSNode.Constraints.VertexConstraint vertex_constraints = 1;
inline int CBSNode_Constraints::_internal_vertex_constraints_size() const {
  return vertex_constraints_.size();
}
inline int CBSNode_Constraints::vertex_constraints_size() const {
  return _internal_vertex_constraints_size();
}
inline void CBSNode_Constraints::clear_vertex_constraints() {
  vertex_constraints_.Clear();
}
inline ::CBSProto::CBSNode_Constraints_VertexConstraint* CBSNode_Constraints::mutable_vertex_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:CBSProto.CBSNode.Constraints.vertex_constraints)
  return vertex_constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_VertexConstraint >*
CBSNode_Constraints::mutable_vertex_constraints() {
  // @@protoc_insertion_point(field_mutable_list:CBSProto.CBSNode.Constraints.vertex_constraints)
  return &vertex_constraints_;
}
inline const ::CBSProto::CBSNode_Constraints_VertexConstraint& CBSNode_Constraints::_internal_vertex_constraints(int index) const {
  return vertex_constraints_.Get(index);
}
inline const ::CBSProto::CBSNode_Constraints_VertexConstraint& CBSNode_Constraints::vertex_constraints(int index) const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.vertex_constraints)
  return _internal_vertex_constraints(index);
}
inline ::CBSProto::CBSNode_Constraints_VertexConstraint* CBSNode_Constraints::_internal_add_vertex_constraints() {
  return vertex_constraints_.Add();
}
inline ::CBSProto::CBSNode_Constraints_VertexConstraint* CBSNode_Constraints::add_vertex_constraints() {
  ::CBSProto::CBSNode_Constraints_VertexConstraint* _add = _internal_add_vertex_constraints();
  // @@protoc_insertion_point(field_add:CBSProto.CBSNode.Constraints.vertex_constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_VertexConstraint >&
CBSNode_Constraints::vertex_constraints() const {
  // @@protoc_insertion_point(field_list:CBSProto.CBSNode.Constraints.vertex_constraints)
  return vertex_constraints_;
}

// repeated .CBSProto.CBSNode.Constraints.EdgeConstraint edge_constraints = 2;
inline int CBSNode_Constraints::_internal_edge_constraints_size() const {
  return edge_constraints_.size();
}
inline int CBSNode_Constraints::edge_constraints_size() const {
  return _internal_edge_constraints_size();
}
inline void CBSNode_Constraints::clear_edge_constraints() {
  edge_constraints_.Clear();
}
inline ::CBSProto::CBSNode_Constraints_EdgeConstraint* CBSNode_Constraints::mutable_edge_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:CBSProto.CBSNode.Constraints.edge_constraints)
  return edge_constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_EdgeConstraint >*
CBSNode_Constraints::mutable_edge_constraints() {
  // @@protoc_insertion_point(field_mutable_list:CBSProto.CBSNode.Constraints.edge_constraints)
  return &edge_constraints_;
}
inline const ::CBSProto::CBSNode_Constraints_EdgeConstraint& CBSNode_Constraints::_internal_edge_constraints(int index) const {
  return edge_constraints_.Get(index);
}
inline const ::CBSProto::CBSNode_Constraints_EdgeConstraint& CBSNode_Constraints::edge_constraints(int index) const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Constraints.edge_constraints)
  return _internal_edge_constraints(index);
}
inline ::CBSProto::CBSNode_Constraints_EdgeConstraint* CBSNode_Constraints::_internal_add_edge_constraints() {
  return edge_constraints_.Add();
}
inline ::CBSProto::CBSNode_Constraints_EdgeConstraint* CBSNode_Constraints::add_edge_constraints() {
  ::CBSProto::CBSNode_Constraints_EdgeConstraint* _add = _internal_add_edge_constraints();
  // @@protoc_insertion_point(field_add:CBSProto.CBSNode.Constraints.edge_constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints_EdgeConstraint >&
CBSNode_Constraints::edge_constraints() const {
  // @@protoc_insertion_point(field_list:CBSProto.CBSNode.Constraints.edge_constraints)
  return edge_constraints_;
}

// -------------------------------------------------------------------

// CBSNode_PathEntry

// .CBSProto.CBSNode.State state = 1;
inline bool CBSNode_PathEntry::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool CBSNode_PathEntry::has_state() const {
  return _internal_has_state();
}
inline void CBSNode_PathEntry::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::CBSProto::CBSNode_State& CBSNode_PathEntry::_internal_state() const {
  const ::CBSProto::CBSNode_State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBSProto::CBSNode_State&>(
      ::CBSProto::_CBSNode_State_default_instance_);
}
inline const ::CBSProto::CBSNode_State& CBSNode_PathEntry::state() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.PathEntry.state)
  return _internal_state();
}
inline void CBSNode_PathEntry::unsafe_arena_set_allocated_state(
    ::CBSProto::CBSNode_State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBSProto.CBSNode.PathEntry.state)
}
inline ::CBSProto::CBSNode_State* CBSNode_PathEntry::release_state() {
  
  ::CBSProto::CBSNode_State* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CBSProto::CBSNode_State* CBSNode_PathEntry::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:CBSProto.CBSNode.PathEntry.state)
  
  ::CBSProto::CBSNode_State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::CBSProto::CBSNode_State* CBSNode_PathEntry::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CBSProto::CBSNode_State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::CBSProto::CBSNode_State* CBSNode_PathEntry::mutable_state() {
  ::CBSProto::CBSNode_State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:CBSProto.CBSNode.PathEntry.state)
  return _msg;
}
inline void CBSNode_PathEntry::set_allocated_state(::CBSProto::CBSNode_State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CBSProto::CBSNode_State>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:CBSProto.CBSNode.PathEntry.state)
}

// int32 fScore = 2;
inline void CBSNode_PathEntry::clear_fscore() {
  fscore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_PathEntry::_internal_fscore() const {
  return fscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_PathEntry::fscore() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.PathEntry.fScore)
  return _internal_fscore();
}
inline void CBSNode_PathEntry::_internal_set_fscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fscore_ = value;
}
inline void CBSNode_PathEntry::set_fscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fscore(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.PathEntry.fScore)
}

// int32 gScore = 3;
inline void CBSNode_PathEntry::clear_gscore() {
  gscore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_PathEntry::_internal_gscore() const {
  return gscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_PathEntry::gscore() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.PathEntry.gScore)
  return _internal_gscore();
}
inline void CBSNode_PathEntry::_internal_set_gscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gscore_ = value;
}
inline void CBSNode_PathEntry::set_gscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gscore(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.PathEntry.gScore)
}

// int32 focalScore = 4;
inline void CBSNode_PathEntry::clear_focalscore() {
  focalscore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_PathEntry::_internal_focalscore() const {
  return focalscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBSNode_PathEntry::focalscore() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.PathEntry.focalScore)
  return _internal_focalscore();
}
inline void CBSNode_PathEntry::_internal_set_focalscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  focalscore_ = value;
}
inline void CBSNode_PathEntry::set_focalscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_focalscore(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBSNode.PathEntry.focalScore)
}

// .CBSProto.CBSNode.PathEntry parent = 5;
inline bool CBSNode_PathEntry::_internal_has_parent() const {
  return this != internal_default_instance() && parent_ != nullptr;
}
inline bool CBSNode_PathEntry::has_parent() const {
  return _internal_has_parent();
}
inline void CBSNode_PathEntry::clear_parent() {
  if (GetArenaForAllocation() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
inline const ::CBSProto::CBSNode_PathEntry& CBSNode_PathEntry::_internal_parent() const {
  const ::CBSProto::CBSNode_PathEntry* p = parent_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBSProto::CBSNode_PathEntry&>(
      ::CBSProto::_CBSNode_PathEntry_default_instance_);
}
inline const ::CBSProto::CBSNode_PathEntry& CBSNode_PathEntry::parent() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.PathEntry.parent)
  return _internal_parent();
}
inline void CBSNode_PathEntry::unsafe_arena_set_allocated_parent(
    ::CBSProto::CBSNode_PathEntry* parent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  parent_ = parent;
  if (parent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBSProto.CBSNode.PathEntry.parent)
}
inline ::CBSProto::CBSNode_PathEntry* CBSNode_PathEntry::release_parent() {
  
  ::CBSProto::CBSNode_PathEntry* temp = parent_;
  parent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CBSProto::CBSNode_PathEntry* CBSNode_PathEntry::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_release:CBSProto.CBSNode.PathEntry.parent)
  
  ::CBSProto::CBSNode_PathEntry* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::CBSProto::CBSNode_PathEntry* CBSNode_PathEntry::_internal_mutable_parent() {
  
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::CBSProto::CBSNode_PathEntry>(GetArenaForAllocation());
    parent_ = p;
  }
  return parent_;
}
inline ::CBSProto::CBSNode_PathEntry* CBSNode_PathEntry::mutable_parent() {
  ::CBSProto::CBSNode_PathEntry* _msg = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:CBSProto.CBSNode.PathEntry.parent)
  return _msg;
}
inline void CBSNode_PathEntry::set_allocated_parent(::CBSProto::CBSNode_PathEntry* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete parent_;
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CBSProto::CBSNode_PathEntry>::GetOwningArena(parent);
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    
  } else {
    
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:CBSProto.CBSNode.PathEntry.parent)
}

// -------------------------------------------------------------------

// CBSNode_Path

// repeated .CBSProto.CBSNode.PathEntry path = 1;
inline int CBSNode_Path::_internal_path_size() const {
  return path_.size();
}
inline int CBSNode_Path::path_size() const {
  return _internal_path_size();
}
inline void CBSNode_Path::clear_path() {
  path_.Clear();
}
inline ::CBSProto::CBSNode_PathEntry* CBSNode_Path::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:CBSProto.CBSNode.Path.path)
  return path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_PathEntry >*
CBSNode_Path::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:CBSProto.CBSNode.Path.path)
  return &path_;
}
inline const ::CBSProto::CBSNode_PathEntry& CBSNode_Path::_internal_path(int index) const {
  return path_.Get(index);
}
inline const ::CBSProto::CBSNode_PathEntry& CBSNode_Path::path(int index) const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.Path.path)
  return _internal_path(index);
}
inline ::CBSProto::CBSNode_PathEntry* CBSNode_Path::_internal_add_path() {
  return path_.Add();
}
inline ::CBSProto::CBSNode_PathEntry* CBSNode_Path::add_path() {
  ::CBSProto::CBSNode_PathEntry* _add = _internal_add_path();
  // @@protoc_insertion_point(field_add:CBSProto.CBSNode.Path.path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_PathEntry >&
CBSNode_Path::path() const {
  // @@protoc_insertion_point(field_list:CBSProto.CBSNode.Path.path)
  return path_;
}

// -------------------------------------------------------------------

// CBSNode

// repeated .CBSProto.CBSNode.Path cost_matrix = 1;
inline int CBSNode::_internal_cost_matrix_size() const {
  return cost_matrix_.size();
}
inline int CBSNode::cost_matrix_size() const {
  return _internal_cost_matrix_size();
}
inline void CBSNode::clear_cost_matrix() {
  cost_matrix_.Clear();
}
inline ::CBSProto::CBSNode_Path* CBSNode::mutable_cost_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:CBSProto.CBSNode.cost_matrix)
  return cost_matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Path >*
CBSNode::mutable_cost_matrix() {
  // @@protoc_insertion_point(field_mutable_list:CBSProto.CBSNode.cost_matrix)
  return &cost_matrix_;
}
inline const ::CBSProto::CBSNode_Path& CBSNode::_internal_cost_matrix(int index) const {
  return cost_matrix_.Get(index);
}
inline const ::CBSProto::CBSNode_Path& CBSNode::cost_matrix(int index) const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.cost_matrix)
  return _internal_cost_matrix(index);
}
inline ::CBSProto::CBSNode_Path* CBSNode::_internal_add_cost_matrix() {
  return cost_matrix_.Add();
}
inline ::CBSProto::CBSNode_Path* CBSNode::add_cost_matrix() {
  ::CBSProto::CBSNode_Path* _add = _internal_add_cost_matrix();
  // @@protoc_insertion_point(field_add:CBSProto.CBSNode.cost_matrix)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Path >&
CBSNode::cost_matrix() const {
  // @@protoc_insertion_point(field_list:CBSProto.CBSNode.cost_matrix)
  return cost_matrix_;
}

// repeated .CBSProto.CBSNode.Constraints constraint_sets = 2;
inline int CBSNode::_internal_constraint_sets_size() const {
  return constraint_sets_.size();
}
inline int CBSNode::constraint_sets_size() const {
  return _internal_constraint_sets_size();
}
inline void CBSNode::clear_constraint_sets() {
  constraint_sets_.Clear();
}
inline ::CBSProto::CBSNode_Constraints* CBSNode::mutable_constraint_sets(int index) {
  // @@protoc_insertion_point(field_mutable:CBSProto.CBSNode.constraint_sets)
  return constraint_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints >*
CBSNode::mutable_constraint_sets() {
  // @@protoc_insertion_point(field_mutable_list:CBSProto.CBSNode.constraint_sets)
  return &constraint_sets_;
}
inline const ::CBSProto::CBSNode_Constraints& CBSNode::_internal_constraint_sets(int index) const {
  return constraint_sets_.Get(index);
}
inline const ::CBSProto::CBSNode_Constraints& CBSNode::constraint_sets(int index) const {
  // @@protoc_insertion_point(field_get:CBSProto.CBSNode.constraint_sets)
  return _internal_constraint_sets(index);
}
inline ::CBSProto::CBSNode_Constraints* CBSNode::_internal_add_constraint_sets() {
  return constraint_sets_.Add();
}
inline ::CBSProto::CBSNode_Constraints* CBSNode::add_constraint_sets() {
  ::CBSProto::CBSNode_Constraints* _add = _internal_add_constraint_sets();
  // @@protoc_insertion_point(field_add:CBSProto.CBSNode.constraint_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBSNode_Constraints >&
CBSNode::constraint_sets() const {
  // @@protoc_insertion_point(field_list:CBSProto.CBSNode.constraint_sets)
  return constraint_sets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CBSProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cbs_5fnode_2eproto
