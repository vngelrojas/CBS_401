// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cbs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cbs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cbs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cbs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cbs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cbs_2eproto;
namespace CBSProto {
class CBS;
struct CBSDefaultTypeInternal;
extern CBSDefaultTypeInternal _CBS_default_instance_;
class CBS_Location;
struct CBS_LocationDefaultTypeInternal;
extern CBS_LocationDefaultTypeInternal _CBS_Location_default_instance_;
class CBS_State;
struct CBS_StateDefaultTypeInternal;
extern CBS_StateDefaultTypeInternal _CBS_State_default_instance_;
}  // namespace CBSProto
PROTOBUF_NAMESPACE_OPEN
template<> ::CBSProto::CBS* Arena::CreateMaybeMessage<::CBSProto::CBS>(Arena*);
template<> ::CBSProto::CBS_Location* Arena::CreateMaybeMessage<::CBSProto::CBS_Location>(Arena*);
template<> ::CBSProto::CBS_State* Arena::CreateMaybeMessage<::CBSProto::CBS_State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CBSProto {

// ===================================================================

class CBS_Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBS.Location) */ {
 public:
  inline CBS_Location() : CBS_Location(nullptr) {}
  ~CBS_Location() override;
  explicit constexpr CBS_Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBS_Location(const CBS_Location& from);
  CBS_Location(CBS_Location&& from) noexcept
    : CBS_Location() {
    *this = ::std::move(from);
  }

  inline CBS_Location& operator=(const CBS_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBS_Location& operator=(CBS_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBS_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBS_Location* internal_default_instance() {
    return reinterpret_cast<const CBS_Location*>(
               &_CBS_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBS_Location& a, CBS_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(CBS_Location* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBS_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBS_Location* New() const final {
    return new CBS_Location();
  }

  CBS_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBS_Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBS_Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBS_Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBS_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBS.Location";
  }
  protected:
  explicit CBS_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBSProto.CBS.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_2eproto;
};
// -------------------------------------------------------------------

class CBS_State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBS.State) */ {
 public:
  inline CBS_State() : CBS_State(nullptr) {}
  ~CBS_State() override;
  explicit constexpr CBS_State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBS_State(const CBS_State& from);
  CBS_State(CBS_State&& from) noexcept
    : CBS_State() {
    *this = ::std::move(from);
  }

  inline CBS_State& operator=(const CBS_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBS_State& operator=(CBS_State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBS_State& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBS_State* internal_default_instance() {
    return reinterpret_cast<const CBS_State*>(
               &_CBS_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CBS_State& a, CBS_State& b) {
    a.Swap(&b);
  }
  inline void Swap(CBS_State* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBS_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBS_State* New() const final {
    return new CBS_State();
  }

  CBS_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBS_State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBS_State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBS_State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBS_State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBS.State";
  }
  protected:
  explicit CBS_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 2;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 3;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBSProto.CBS.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_2eproto;
};
// -------------------------------------------------------------------

class CBS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBSProto.CBS) */ {
 public:
  inline CBS() : CBS(nullptr) {}
  ~CBS() override;
  explicit constexpr CBS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBS(const CBS& from);
  CBS(CBS&& from) noexcept
    : CBS() {
    *this = ::std::move(from);
  }

  inline CBS& operator=(const CBS& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBS& operator=(CBS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBS& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBS* internal_default_instance() {
    return reinterpret_cast<const CBS*>(
               &_CBS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CBS& a, CBS& b) {
    a.Swap(&b);
  }
  inline void Swap(CBS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBS* New() const final {
    return new CBS();
  }

  CBS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBSProto.CBS";
  }
  protected:
  explicit CBS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBS_Location Location;
  typedef CBS_State State;

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 5,
    kGoalsFieldNumber = 6,
    kStartStatesFieldNumber = 7,
    kNumOfRowsFieldNumber = 1,
    kNumOfColsFieldNumber = 2,
    kWorldSizeFieldNumber = 3,
    kWorldRankFieldNumber = 4,
  };
  // repeated .CBSProto.CBS.Location obstacles = 5;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::CBSProto::CBS_Location* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location >*
      mutable_obstacles();
  private:
  const ::CBSProto::CBS_Location& _internal_obstacles(int index) const;
  ::CBSProto::CBS_Location* _internal_add_obstacles();
  public:
  const ::CBSProto::CBS_Location& obstacles(int index) const;
  ::CBSProto::CBS_Location* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location >&
      obstacles() const;

  // repeated .CBSProto.CBS.Location goals = 6;
  int goals_size() const;
  private:
  int _internal_goals_size() const;
  public:
  void clear_goals();
  ::CBSProto::CBS_Location* mutable_goals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location >*
      mutable_goals();
  private:
  const ::CBSProto::CBS_Location& _internal_goals(int index) const;
  ::CBSProto::CBS_Location* _internal_add_goals();
  public:
  const ::CBSProto::CBS_Location& goals(int index) const;
  ::CBSProto::CBS_Location* add_goals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location >&
      goals() const;

  // repeated .CBSProto.CBS.State start_states = 7;
  int start_states_size() const;
  private:
  int _internal_start_states_size() const;
  public:
  void clear_start_states();
  ::CBSProto::CBS_State* mutable_start_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_State >*
      mutable_start_states();
  private:
  const ::CBSProto::CBS_State& _internal_start_states(int index) const;
  ::CBSProto::CBS_State* _internal_add_start_states();
  public:
  const ::CBSProto::CBS_State& start_states(int index) const;
  ::CBSProto::CBS_State* add_start_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_State >&
      start_states() const;

  // int32 num_of_rows = 1;
  void clear_num_of_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_rows() const;
  void set_num_of_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_of_rows() const;
  void _internal_set_num_of_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_of_cols = 2;
  void clear_num_of_cols();
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_cols() const;
  void set_num_of_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_of_cols() const;
  void _internal_set_num_of_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_size = 3;
  void clear_world_size();
  ::PROTOBUF_NAMESPACE_ID::int32 world_size() const;
  void set_world_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_size() const;
  void _internal_set_world_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_rank = 4;
  void clear_world_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 world_rank() const;
  void set_world_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_rank() const;
  void _internal_set_world_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBSProto.CBS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location > obstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location > goals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_State > start_states_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_cols_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cbs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBS_Location

// int32 x = 1;
inline void CBS_Location::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_Location::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_Location::x() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.Location.x)
  return _internal_x();
}
inline void CBS_Location::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void CBS_Location::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.Location.x)
}

// int32 y = 2;
inline void CBS_Location::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_Location::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_Location::y() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.Location.y)
  return _internal_y();
}
inline void CBS_Location::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void CBS_Location::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.Location.y)
}

// -------------------------------------------------------------------

// CBS_State

// int32 time = 1;
inline void CBS_State::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_State::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_State::time() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.State.time)
  return _internal_time();
}
inline void CBS_State::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void CBS_State::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.State.time)
}

// int32 x = 2;
inline void CBS_State::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_State::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_State::x() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.State.x)
  return _internal_x();
}
inline void CBS_State::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void CBS_State::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.State.x)
}

// int32 y = 3;
inline void CBS_State::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_State::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS_State::y() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.State.y)
  return _internal_y();
}
inline void CBS_State::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void CBS_State::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.State.y)
}

// -------------------------------------------------------------------

// CBS

// int32 num_of_rows = 1;
inline void CBS::clear_num_of_rows() {
  num_of_rows_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS::_internal_num_of_rows() const {
  return num_of_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS::num_of_rows() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.num_of_rows)
  return _internal_num_of_rows();
}
inline void CBS::_internal_set_num_of_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_of_rows_ = value;
}
inline void CBS::set_num_of_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_of_rows(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.num_of_rows)
}

// int32 num_of_cols = 2;
inline void CBS::clear_num_of_cols() {
  num_of_cols_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS::_internal_num_of_cols() const {
  return num_of_cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS::num_of_cols() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.num_of_cols)
  return _internal_num_of_cols();
}
inline void CBS::_internal_set_num_of_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_of_cols_ = value;
}
inline void CBS::set_num_of_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_of_cols(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.num_of_cols)
}

// int32 world_size = 3;
inline void CBS::clear_world_size() {
  world_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS::_internal_world_size() const {
  return world_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS::world_size() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.world_size)
  return _internal_world_size();
}
inline void CBS::_internal_set_world_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_size_ = value;
}
inline void CBS::set_world_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_size(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.world_size)
}

// int32 world_rank = 4;
inline void CBS::clear_world_rank() {
  world_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS::_internal_world_rank() const {
  return world_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBS::world_rank() const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.world_rank)
  return _internal_world_rank();
}
inline void CBS::_internal_set_world_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_rank_ = value;
}
inline void CBS::set_world_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_rank(value);
  // @@protoc_insertion_point(field_set:CBSProto.CBS.world_rank)
}

// repeated .CBSProto.CBS.Location obstacles = 5;
inline int CBS::_internal_obstacles_size() const {
  return obstacles_.size();
}
inline int CBS::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void CBS::clear_obstacles() {
  obstacles_.Clear();
}
inline ::CBSProto::CBS_Location* CBS::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:CBSProto.CBS.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location >*
CBS::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:CBSProto.CBS.obstacles)
  return &obstacles_;
}
inline const ::CBSProto::CBS_Location& CBS::_internal_obstacles(int index) const {
  return obstacles_.Get(index);
}
inline const ::CBSProto::CBS_Location& CBS::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.obstacles)
  return _internal_obstacles(index);
}
inline ::CBSProto::CBS_Location* CBS::_internal_add_obstacles() {
  return obstacles_.Add();
}
inline ::CBSProto::CBS_Location* CBS::add_obstacles() {
  ::CBSProto::CBS_Location* _add = _internal_add_obstacles();
  // @@protoc_insertion_point(field_add:CBSProto.CBS.obstacles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location >&
CBS::obstacles() const {
  // @@protoc_insertion_point(field_list:CBSProto.CBS.obstacles)
  return obstacles_;
}

// repeated .CBSProto.CBS.Location goals = 6;
inline int CBS::_internal_goals_size() const {
  return goals_.size();
}
inline int CBS::goals_size() const {
  return _internal_goals_size();
}
inline void CBS::clear_goals() {
  goals_.Clear();
}
inline ::CBSProto::CBS_Location* CBS::mutable_goals(int index) {
  // @@protoc_insertion_point(field_mutable:CBSProto.CBS.goals)
  return goals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location >*
CBS::mutable_goals() {
  // @@protoc_insertion_point(field_mutable_list:CBSProto.CBS.goals)
  return &goals_;
}
inline const ::CBSProto::CBS_Location& CBS::_internal_goals(int index) const {
  return goals_.Get(index);
}
inline const ::CBSProto::CBS_Location& CBS::goals(int index) const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.goals)
  return _internal_goals(index);
}
inline ::CBSProto::CBS_Location* CBS::_internal_add_goals() {
  return goals_.Add();
}
inline ::CBSProto::CBS_Location* CBS::add_goals() {
  ::CBSProto::CBS_Location* _add = _internal_add_goals();
  // @@protoc_insertion_point(field_add:CBSProto.CBS.goals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_Location >&
CBS::goals() const {
  // @@protoc_insertion_point(field_list:CBSProto.CBS.goals)
  return goals_;
}

// repeated .CBSProto.CBS.State start_states = 7;
inline int CBS::_internal_start_states_size() const {
  return start_states_.size();
}
inline int CBS::start_states_size() const {
  return _internal_start_states_size();
}
inline void CBS::clear_start_states() {
  start_states_.Clear();
}
inline ::CBSProto::CBS_State* CBS::mutable_start_states(int index) {
  // @@protoc_insertion_point(field_mutable:CBSProto.CBS.start_states)
  return start_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_State >*
CBS::mutable_start_states() {
  // @@protoc_insertion_point(field_mutable_list:CBSProto.CBS.start_states)
  return &start_states_;
}
inline const ::CBSProto::CBS_State& CBS::_internal_start_states(int index) const {
  return start_states_.Get(index);
}
inline const ::CBSProto::CBS_State& CBS::start_states(int index) const {
  // @@protoc_insertion_point(field_get:CBSProto.CBS.start_states)
  return _internal_start_states(index);
}
inline ::CBSProto::CBS_State* CBS::_internal_add_start_states() {
  return start_states_.Add();
}
inline ::CBSProto::CBS_State* CBS::add_start_states() {
  ::CBSProto::CBS_State* _add = _internal_add_start_states();
  // @@protoc_insertion_point(field_add:CBSProto.CBS.start_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBSProto::CBS_State >&
CBS::start_states() const {
  // @@protoc_insertion_point(field_list:CBSProto.CBS.start_states)
  return start_states_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CBSProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cbs_2eproto
